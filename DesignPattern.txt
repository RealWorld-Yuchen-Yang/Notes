Creational Patterns****************************
1. Factory Method Pattern
  1.1 When to use a factory pattern?
    When we would like to use a method to produce several different class instances, and these classes share a common parent
  1.2 One advantage of using the factory pattern is that it can eliminate the (if-else/switch-case) statements.
    This is not totally remove the (if-else/switch-case),
    They are just moved into the factory.
    The advantage of doing so is that
      1.2.1 we hide the implementation from user
      1.2.2 we concentrate the object creation logic to one place, which increases maintainability

2. Abstract Factory Pattern
  2.1 What is the Abstract Factory Pattern?
      It is like a factory, but everything is encapsulated
      2.1.1 The method that orders the object
      2.1.2 The factory that build the object
      2.1.3 The final object
      2.1.4 The final objects contain objects that use the Strategy Pattern
        Composition: Object class fields are objects
  2.2 What can you do with an Abstract Factory?
    2.2.1 Allows you to create families of related objects without specifying a concrete class
    2.2.2 Use when you have many objects that can be added, or changed dynamically during runtime
    2.2.3 You can model anything you imagine and have those objects interact through common interfaces
  2.3 The Abstract Factory Object passes the concrete Factory Object to the Product's constructor
      so as to let the concrete Factory produce components used to build the Product in the Product itself's constructor

3. Builder Pattern
  3.1 What is the Builder Pattern?
    Builder Pattern is used to create objects made from a bunch of other objects
    3.1.1 When you want to build an object made up from other objects
    3.1.2 When you want the creation of components to be independent of the main object
    3.1.3 Hide the creation of the parts from the client so both are not dependent
    3.1.4 The builder knows the specifics and nobody else does

4. Singleton Pattern
  4.1 It is used when you want to eliminate the option of instantiating more than one object
  4.2 To prevent threads mess up singleton,
      inside the singleton getInstance(), we can
        synchronized(Singleton.class)
        {
          if(firstInstance == null)
          {
            firstInstance = new Singleton();
          }
        }
      we do not mark the getInstance() synchronized is because it can dramatically slow down our program.

5. Prototype Pattern
  5.1 Prototype pattern creates new objects (instances) by cloning (copying) other objects
  5.2 It allows adding of any subclass instance of a known super class at run time
      Note: the super class should extend Clonable
  5.3 When there are numerous potential classes that you want to only use if needed at runtime
  5.4 It reduces the need for creating subclasses.

Structural Patterns****************************
1. Adapter Pattern
  1.1 Adapter Pattern allows two incompatible interfaces to work together
  1.2 Used when the client expects a (target) interface
  1.3 The adapter class allows the use of the available interface and the Target interface
  1.4 Any class can work together as long as the Adapter solves the issue that all classes must implement every method defined by the shared interface
  1.5 The Adapter is implemented by using "Composition",
      it bridges the "Target" and the "Adaptee" by
      containing the "Adaptee" and
      implementing the "Target"

2. Bridge Pattern
  2.1 Decouple an abstraction from its implementation so that the two can vary independently
  2.2 It allows progressively adding functionality while separating out major differences using abstract classes
  2.3 It is implemented by using two layers of abstraction.
    2.3.1 Layer1: It needs two abstract classes,
                  one abstract use the other by using composition (contain the other abstract class)
          Layer2: both the two abstract classes can have different implementation classes, which are used to do specific jobs
  2.4 When to use the bridge design pattern?
      When you want to be able to change both the abstractions (abstract classes) and concrete classes independently

3. Composite Pattern

4. Decorator Pattern
  4.1 composition is dynamic,
      inheritance is static
  4.2 decorator pattern uses composition and allows you modify an object dynamically
  4.3 you would use it when you want the capability of inheritance with subclass.
      but you need to add functionality at run time
  4.4 It simplifies code, because you add functionality using many simple classes
  4.5 Rather than rewrite old code, you can extend with new code
  4.6 the decorator inherits from the entity that its going to decorate,
      and it also stores an instance of that entity,
    4.6.1 the reason for the decorator to hold an instance of the entity to be decorated is because
          that instance is the source we would like to decorate
    4.6.2 the reason for the decorator to inherit the decorated entity is because
          we would like to get the same type of instance after it is decorated

5. Facade Pattern
  5.1 When you create a simplified interface that performs many other actions behind the scenes

6. Flyweight Pattern

7. Proxy Pattern

Behavioral Patterns****************************
1. Chain of Responsibility Pattern

2. Command Pattern (currently watching)
  2.1 what is command design pattern
    2.1.1 The command pattern is a behavioral design pattern in which
          an object is used to represent and encapsulate all the information needed to call a method at a later time
    2.1.2 This information includes the method name, the object that owns the method and values for the method parameters.
    2.1.3 It allows you to store lists of code that is executed at a later time or many times
    2.1.4 Client says I want a specific Command to run when execute() is called on 1 of these encapsulated (hidden) objects
    2.1.5 An Object called the Invoker transfers this Command to another Object(which is the Receiver) to execute the right code
          the Invoker encapsulates the SpecificCommand or Collection of SpecificCommand,
          is agnostic the real functionality of the SpecificCommand,
          but just blindly call the execute() method.
    2.1.6 SpecificCommand is implemented as a class which implements the base Command Interface (who often have execute(), undo() abstract methods)
    2.1.7 each different SpecificCommand do a particular thing, it encapsulates a SpecificExecutor,
          which is an implementation of Executor class,
          SpecificCommand invokes methods on the SpecificExecutor by using execute(),
          and the SpecificExecution does the real execution
  2.2 Benefits of the Command Design Pattern
    2.2.1 Allows you to set aside a list of commands for later use
    2.2.2 A class is a great place to store procedures you want to be executed
    2.2.3 You can store multiple commands in a class to use over and over
    2.2.4 You can implement undo() procedure of a specific command (subclass of Command interface)
          undo() should be defined in the Command interface,
          and implemented in the subclass, which the opposite effect of that specific command
  2.3 Negative
    you create many small classes that store lists of commands

3. Interpreter Pattern

4. Iterator Pattern
  4.1 The Iterator pattern provides you with a uniform way to access different collections of Objects
  4.2 If you get an Array, ArrayList and Hashtable of Objects,
      you pop out an iterator for each and treat them the same
  4.3 This provides a uniform way to cycle through different collections
  4.4 You can also write polymorphic code because you can refer to each collection of objects because they will implement the same interface

5. Mediator Pattern

6. Memento Pattern

7. Observer Pattern
  7.1 When do you need observer pattern?
    When you need many other objects to receive an update when another object changes
  7.2 The subject(publisher) does not need to know any information of the Observers
  7.3 Negatives: The subject may send updates that don't matter to the Observer(subscriber)
  7.4 We can register the Observer into the Subject, whose reference are stored as a list in the subject
      The subject notifies the registered observers automatically of any state changes, usually by calling one of their methods.
  7.5 The observer can also store a reference to its subject, so that it can call methods of the object that it is observing

8. State Pattern

9. Strategy Pattern
  9.1. Avoid Interfaces that Just Force Action
  9.2. The way of implementing strategy pattern is by defining Interface type field in a superclass
    so that in the subclasses, they can insert behavioral implementation of that Interface type field
  9.3 Another explanation of strategy pattern:
    Define a family of algorithms(behaviors), encapsulate each one, and make them interchangeable.
    The strategy pattern lets the algorithm vary independently from client that use it.
  9.4. This decoupling technique is called composition instead of hard-coded inheritance
  9.5 When to use Strategy Pattern:
    9.5.1: When you want to define a class that will have one behavior that is similar to other behaviors in a list
    9.5.2: When you need to use one of several behaviors dynamically
  9.6 Benefits
    9.6.1 Often reduces long list of conditionals
    9.6.2 Avoid duplicate code
    9.6.3 Keeps class changes from forcing other class changes
    9.6.4 Can hide complicated/secret code from the user
  9.7 Negatives:
    9.7.1 Increased Number of Objects/Classes

10. Template Method Pattern
  10.1 Template pattern is used to create a group of subclasses that have to execute a similar group of methods
  10.2 You create an abstract class that contains a method called the Template Method
  10.3 The Template Method contains a series of method calls that every subclass object will call
  10.4 The subclass objects can override some of the method calls
11. Visitor Pattern
