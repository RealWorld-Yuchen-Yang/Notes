1. ActiveMQ, RabbitMQ, Kafka comparisions
  1.1 ActiveMQ
    1.1.1 消息重发机制：
            我们可以在brokerUrl中配置“redelivery”策略， 比如当一条消息处理异常时，
            broker端可以重发的最大次数， 这与REDELIVERED_ACK_TYPE互相协调
            当消息需要broker重发时，
            consumer会首先在本地的”deliveredMessage队列（Consumer已经接受但还未确认的消息队列）中删除它，
            然后向broker发送“REDELIVERED_ACK_TYPE”类型确认命令，
            broker将会把指令中指定的消息重新添加到pendingQueue（亟待发送给consumer的消息队列）中，
            直到适合的时机， 再次push给client
    1.1.2 高效的消费模型：
            当consumer消费信息的速率高于producer生产信息的速率时:
              批量的获取消息（prefetch)， 并延迟确认（optimizeACK）
              prefetchSize一般要设置的比较小， 这样可以保证load被均衡的分配给consumer的
            当consumer消费信息的速率远小于producer生产信息的速率时：
              1）部署多个consumer
              2) 使用较小的prefetch
    1.1.3 consumer消费消息的风格有两种： 同步、异步
      1.1.3.1 同步 consumer.receive()
              同步调用时， 在消息从receive方法返回之前， 就已经使用ACK，
              因此如果consumer端没有处理成功，
              此消息将会丢失
      1.1.3.2 异步 messageListener
              异步调用时，
              消息确认是在onMessage方法返回之后，
              如果onMessage方法异常， 会导致消息重发
              broker每次redeliver消息的时候都会在消息中保存一个redeliverCounter计数器，
              如果消息发送的次数达到阈值，
              consumer会发送ACK_TYPE为POSION_ACK_TYPE确认指令，
              这就导致broker端认为此消息无法消费，
              此消息将会被删除或者迁移到”dead letter"中


  1.2 RabbitMQ
  1.3 Kafka
    1.3.1 the most important factor about Kafka over ActiveMQ is the throughput
    1.3.2 additionally, it supports relatively long term persistence of message to support a wide variety of consumers
          partitioning of the message stream across servers and consumers,
          and functionality for loading data into Apache Hadoop for offline, batch processing
    1.3.3 is Kafka suitable for zero loss messaging system?
      1.3.3.1 messages sent by a producer to a particular topic partition will be appended in the order they are sent
      1.3.3.2 for a topic with replication factor N, it will tolerate up to N-1 server failures without losing any messages committed to the log

2. Immutable objects are intrinsically thread safe
   A strategy for defining immutable objects:
  2.1 do not provide "setter" method,
       here "setter" means methods that modify fields or objects referred to by fields
  2.2 make all fields "final" and "private"
  2.3 Do not allow subclass to override methods.
      the simplest way to do this is to declare the class as final.
      A more sophisticated approach is to make the constructor "private" and construct instances in factory methods.
  2.4 if the instance fields include references to mutable objects,
      do not allow those objects to be changed.
    2.4.1 do not provide methods that modify the mutable objects
    2.4.2 do not share reference to the original mutable objects.
          never store references to external, mutable objects passed to the constructor.
          if necessary, create copies and store references to the copies
          similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.

3. Atomic Variables
    the java.util.concurrent.atomic package defines classes that support atomic operations on single variables.
    all classes have get and set methods that work like reads and writes on volatile variables.
    that is, a set has a happens-before relationship with any subsequent get on the same variable.
    The atomic compareAndSet method also has these memory consistency features,
    as do the simple atomic arithmetic methods that apply to integer atomic variables.
    these atomic variables provide atomic methods better than "synchronized methods"

4. Garbage collection
  4.1 garbage collection phases in one GC
    4.1.1 Mark
          starts from root node of your application(main),
          walks the object graph,
          marks objects that are reachable as live
    4.1.2 Delete/sweep
          delete unreachable objects
    4.1.3 compacting:
          compact the memory by moving around the objects and marking the allocation contiguous than fragmented

  4.2 Generational GC concepts
        heap is divided into young and old generations
    4.2.1 young generation
      4.2.1.1 Eden space
                where objects are firstly Created
      4.2.1.2 multiple survivor spaces
                when eden space is full,
                a minorGC is called,
                which copies reachable objects to the survivor space
                and increase their survived generation by 1.
                at a second time, the eden space and the first survivor space are all examined,
                and the still reachable objects are copied to the current survivor space.
              Note: minorGC is triggered by "whether the eden space is nearly full"
    4.2.2 Old (Tenured) generation
            if an object survived a few minorGCs,
            which is defined by:
            "whether the total minorGC reaches the threshold"
            -XX:MaxTenuringThreshold
            such objects are copied over to the old generation

            Note:
              1. both the minorGC and the majorGC are stop the world GC
                 the difference is that,
                 minorGC happens only on the young generation section of the heap,
                 majorGC happens on the entire heap, not just the young/old generation part of the heap
              2. majorGC is triggered by whether the old gene ration is nearly full

  4.3 Garbage collectors
    4.3.1 serial collector
            basic garbage collector that runs in single thread,
            can be used for basic applications

    4.3.2 concurrent collector (CMS concurrent Mark Sweep GC)
            a thread that performs GC along with application execution as the application runs.
            does not wait for the old generation to be full
            Stops the world only during mark/re-mark, not in "sweep or compacting"
            when to use:
              1) there is more memory
              2) there is high number of CPUs
              3) application demands short pauses

    4.3.3 parallel collector
            use multiple CPUs to perform GC.
            multiple threads doing mark/sweep/compacting.
            does not kick in until heap is full/near-full.
            "stops-the-world" when it run
            when to use:
              1) there is less memory
              2) there lesser number of CPUs
              3) application demands high throughput and can withstand pauses

    4.3.4 G1 collector (Garbage first collector)
            heap is divided into multiple sections (which does not matter whether they are eden/survivor/old generation)
            GC are call on such sections who has the most garbage.
            It dynamically selects a set of region to act as young generation in next GC cycle.
            Benefits:
              1) more predictable GC pauses
              2) low pauses with fragmentation
              3) parallelism and concurrency together
              4) better heap utilization

  4.4 Selecting Garbage collector
      Option                            Description
      -XX:+UseSerialGC        single-threaded gc on young and old generation.
                              to be used only on small heaps
      -XX:+UseParallelGC      young generation use parallel gc.
                              old generation use single-threaded gc
      -XX:+UseParallelOldGC   both young and old generations have multi-threaded GC
      -XX:+UseParNewGC        Multi-threaded young generation gc
      -XX:+UseConcMarkSweepGC Enables concurrent collector. Autoenable ParNewGC by default
      -XX:+UseG1GC            use G1

5. HashTable vs HashMap vs ConcurrentHashMap and all kinds of Map implementations
  5.1 java.util.HashTable
    5.1.1 legacy associative array implementation
    5.1.2 all methods are "thread-safe",
          for "synchronized" keyword is used on every public methods
    5.1.3 low efficiency
  5.2 java.util.HashMap
    5.2.1 map implementation that satisfies most of the basic use cases
    5.2.2 not thread-safe
    5.2.3 need to use "synchronized" operations when manipulating from multiple threads (concurrent adds/removes/iteerations)
    5.2.4 it allows to insert "null keys"
    5.2.5 iterations is not guaranteed in order
  5.3 java.util.LinkedHashMap
    5.3.1 very similar to HashMap
    5.3.2 iteration is guaranteed in "insertion order"
    5.3.3 maintains separate doubly linkedlist of all entries that is kept in entry insertion order
  5.4 java.util.TreeMap
    5.4.1 Implementation of SortedMap and NavigableMap interfaces
    5.4.2 iteration is guaranteed in "natural sorted" order of "keys"
    5.4.3 either the keys should implement "Comparable" interface
          or we need to provide an explicit Comparator in the constructor
    5.4.4 Red-black tree based implementation.
          NavigableMap interface provides methods that can return closes match to the key (floorEntry())
  5.5 java.util.IdentityHashMap
    5.5.1 Uses identity to store and retrieve key values
    5.5.2 uses reference equality,
          which means r1==r2 rather than r1.equals(r2)
          for hashing, System.identityHashCode(givenKey) is invoked
          rather than givenKey.hashCode()
    5.5.3 Used in serialization/deep copying or your key is "Class" object or interned strings.
          memory footprint comparatively smaller than a hashmap as there are no Entry/Node created
  5.6 java.util.EnumMap
    5.6.1 EnumMap<K extends Enum<K>, V>
    5.6.2 for use with enum type keys,
          all of the keys in an enum map must come from a single enum type that is specified, explicitly or implicitly when the map is created
    5.6.3 Iterator does not fail fast
    5.6.4 Null keys are not permitted, not synchronized
  5.7 java.util.WeakHashMap
    5.7.1 elements in a weak hashmap can be reclaimed by the garbage collector if there are no other strong references to the object.
          this makes them useful for caches/lookup storage
    5.7.2 keys inserted gets wrapped in java.lang.ref.WeakReference
          Note: WeakReference means
                if the only reference to an object is the hashmap's key,
                CG can collect such objects once called
    5.7.3 useful only if the desired lifetime of cache entries is determined by external references to the key, no the value
  5.8 Collections.synchronizedMap(aMap)
    5.8.1 a convenient "decorator" to create fully synchronized map
    5.8.2 return type is Collections.SynchronizedMap
          it wraps around passed map instance and marks all APIs as synchronized,
          effectively making it similar to HashTable
    5.8.3 performance-wise is similar to java.util.hashTable, which is bad
  5.9 java.util.concurrent.ConcurrentHashMap
    5.9.1 supports "full concurrency during retrieval"
          which means retrieval operations do not block even if adds are running concurrently (mostly)
    5.9.2 reads can be fast,
          while writes requires a lock.
          write lock is acquired at granular level.
          whole table is not locked,
          only segments are locked.
          so a very rare chance of read waiting on write to complete
    5.9.3 Iterations do not throw concurrent modification exception (with in the same thread)
    5.9.4 can be used in cases where a lot of concurrent addition happens followed by or concurrent reads later on
    5.9.5 Null key not allowed.
          If map.get(null) returns null,
          it is not sure if null is not mapped or if null is mapped to a null value.
          In a non-concurrent map,
          we could use contains(),
          but in a concurrent map,
          values can change between API calls.
    5.9.6 operations not atomic,
          which means compound operations should be synchronized or use other means to make it atomic

6. How HashMap is implemented in Java
  6.1 hashing:
        transformation of a string of characters(TEXT) to a shorted fixed-length value that represents original string.
        a shorter value helps in indexing and faster searches.
        In java, every object has a method "public int hashCode()" that return a hash value for given object
  6.2 if two objects are the same, they should have the same hashCode
      if two objects' hashCode is the same, they are not necessarily the same object
  6.3 HashMap low level structures
    6.3.1 It contains an array of Nodes,
          default value is 16 nodes
    6.3.2 each Node is a node in a linkedList
          and it structure is as follows:
          Node<K,V>{
            int hash; //this is the value of key.hashCode(),
                      //the actual place in which linkedList the node is stored in
                      //is calculated by index = hash & (n-1),
                      //n is the size of the first level array
            K key;
            V value;
            Node<K,V> next;//whenever key collision happens, the next field of such indexed linkedlist node is populated
          }
    6.3.3 how the put-in value is retrieved.
      6.3.3.1 by using the key,
              we get the hashCode of the key,
              and use it to calculate the index of the linkedlist.
      6.3.3.2 inside a particular linkedlist
              we compare the desired key and its hashCode together with the key and hashCode information store in the listNode

7. java.lang.String
  7.1 objects backed by char array
  7.2 immutable (means thread-safe and hashcode is cached) and final
  7.3 strings are cached in the string pool (part of the method area)
      if you create two string with "STRING" syntax, they point to the same string
      if you explicitly declare a new String("STRING"), an new object is allocated
      if you explicitly declare a new Stirng("STRING").intern(),  then the object is cached/point to Strings already cached
  7.4 string's "+" concatenation syntax is translated to StringBuilder.append() by Java compiler

8. JVM architecture
  8.1 class loader
      has 3 phase
    8.1 load
          bootstrap class loader (rt.jar) ->
            extension class loader (jre/lib/ext) ->
              application class loader (CLASSPATH, -cp)
    8.2 link
      8.2.1 verify
              verify that the loaded byte code is valid java byte code
      8.2.2 prepare
              memories are allocated to the class variables
              class variables are set to default value
      8.2.3 resolve
              all symbolic references (Strings) are resolved
              ClassNotFoundException can be thrown from this phase
    8.3 initialize
          class variables are initialized to user specified values
  8.2 runtime data areas
    8.2.1 method area (stores class data), heap (stores objects) are shared by threads
    8.2.2 each thread has its own java stack (java.lang.StackOverflowError can be thrown),
          pc registers (pointers to the next instruction to be executed), native method stacks
  8.3 execution engine
    8.3.1 interpreter,
            interprets the code and executes it
    8.3.2 hotspot profiler,
            which is just a monitor
    8.3.3 JIT compiler
            it caches the interpreted machine code and directly executes them
    8.3.4 GC

9. ThreadLocal 类
  9.1 ThreadLocal 类有4个方法
        public void set(T value), 设置当前线程的局部变量值
        public T get()， 提取当前线程的局部变量
        protected T initValue(), 返回该线程变量的初始值
        public void remove(), 删除当前线程局部变量的值，如果不显式调用，则该局部变量值在线程运行结束后也会被删除
  9.2 ThreadLocal类实现线程隔离的机制
        与锁机制的“时间换空间”不同， ThreadLocal采用的是以”空间换时间“来实现线程安全
        ThreadLocal类通过其静态内部类ThreadLocalMap，存储当前线程的变量副本。
        这个ThreadLocalMap实例存放在当前Thread对象中
        ThreadLocalMap的键为当前线程对象本身，值为用户设置的变量副本
  9.3 ThreadLocal对象通常声明在一个多线程共享的外部类中，
        如在ConnectionManager中存储connection

10. intrinsic lock
      it is an implicit object with in an class instance or a class itself
      every instance or every class has one intrinsic lock respectively,
      when accessing the synchronized fields/methods of these entities,
      the intrinsic lock is acquired by the current object,
      thus the current object's other synchronized members are not accessible
      however its non synchronized members are still accessible
      on the other hand,
      with synchronized block(statements),
      you have to explicitly specify the object whose intrinsic lock you are going to acquire

11. concurrency liveness problems
  11.1 deadlock
  11.2 starvation:
        when shared resources are made unavailable for long periods by greedy threads
  11.3 livelock:
        when multiple threads response and react to each other very often,
        and makes none of them can make any progress

12. when Object#wait() is invoked,
    the thread releases the lock and suspends the execution

13. 类加载的双亲委派模型， 以及Tomcat中的类加载顺序
  13.1 类加载的双亲委派模型
        如果一个类加载器收到类加载请求，
        它不会自己去尝试加载这个类，
        而是把这个请求委派给父类加载器去完成。
        只有父类加载器无法完成这个请求时，
        子类加载器才会尝试自己加载。
        这样做的好处是， 可以防止用户自定义的类先被加载， 从而覆盖基础类
  13.2 JVM中类加载器的顺序
    13.2.1 BootstrapClassLoader
    13.2.2 ExtClassLoader
    13.2.3 AppClassLoader
    13.2.4 CustomClassLoader
            Note: 如果到最底层的类加载器都没有找到希望加载的类， 便会抛出ClassNotFoundException
  13.3 Tomcat中的类加载顺序
    13.3.1 Bootstrap 引导类加载器， 加载JVM启动所需要的类， 以及标准扩展类
           location： jre/lib/ext
    13.3.2 System 系统类加载器， 加载Tomcat启动的类，如bootstrap.jar
           location: CATALINA_HOME/bin, 通常在catalina.sh中指定
    13.3.3 webapp 应用类加载器，
      13.3.3.1 WEB-INF/classes
      13.3.3.2 WEB-INF\lib下的包,
    13.3.4 Common 通用类加载器， 加载Tomcat使用以及应用通用的一些类
             location: CATALINA_HOME/lib, 如servlet-api.jar

    Note:
      如果想要在Web应用间共享一些Jar包， 不仅需要将公共包放在Tomcat的lib下，
      还要删除Web应用lib中的包

14. 数据库优化
      数据库的优化主要指的是索引的优化， 因为已经定了的数据库结构是不能改变的
  14.1 创建索引
        对于查询占主要的应用来说，索引尤为重要。
        如果不添加索引，查找任何一条数据都要进行全表的扫描。
        同时应该注意过度索引，比如某列值得数据值变化很少， 这列上便不适合建立索引
  14.2 使用复合索引
        mysql只支持一次索引，
        所以分开的索引并不能被mysql执行多次，
        而使用复合索引，相当于创建了多个阶梯型的索引
        如：
          我们创建（area, age, salary)这样的索引， 实际上相当于创建了
          （area, age, salary)
           (area, age)
           (area)
           三个索引， 这也被称为最佳左前缀特性
        所以在创建组合索引时， 还应注意应将最常用作限制条件的列放在最左边
  14.3 加索引的列不应有NULL值
        因为只要列中有NULL值， 该列将不会被包含在索引中。
        为防止这种情况的发生，我们在数据库设计的时候不要让字段的默认值为NULL
  14.4 使用短索引
        如果可能， 可以指定索引的前缀长度， 这样索引真正开始的位置是在前缀之后。
        适用这样的情况是列中的值有相同的前缀时。
        这样做的好处是：
          使用端索引可以提高查询速度， 节省磁盘空间
  14.5 排序的索引问题
        在数据库默认排序可以符合要求的情况下， 不要使用排序操作
        尽量不要使用多个列的排序，
        如果需要，
        最好创建这些列的符合索引
  14.6 like语句操作
        一般情况下， 不鼓励使用like操作，
        并且like"%XXX%"不会使用索引，
        而like"XXX%"可以使用索引
  14.7 不要在列上进行运算, 而应转化为在每一行上的运算
       如：
        不好：select * from users where YEAR(adddate) < 2007
        好： select * from users where adddate < '2007-01-01'
  14.8 不要使用NOT, IN， 操作
        NOT，IN，操作： 都不会使用索引， 而将进行全表扫描



************************************************************************************
有待解决的问题
************************************************************************************
3. deepCopy无向图
4. 二叉树最大路径和
5. spring transaction declaration and isolation level
6. redis datatype
7. proportionally generate random number
8. binary search
9. hibernate 和 mybatis区别
10. 多线程， volatile 用途及底层实现


12. Java Memory Model

14. Long l1 = new Long(XXX) 声明的 对象与直接赋值的Long l2 = XXX 声明的对象是否一样
15. 如何异步返回表， 并将表进行合并
16. 分库分表
17.current versions
  17.1 Spring 4
  17.2 Hibernate 5.0.12
  17.3 Struts 2
  17.4 Mybatis 3

18. WeakReference与SoftReference的联系与区别
  18.1 WeakReference与SoftReference都可以存储对象的实例引用
  18.2 WeakReference
        是弱引用，
        这个类通常用于在某处保存对象引用，
        而又不干扰该对象被GC。
        通常用于Debug， 内存监视工具程序中。
  18.3 SoftReference
        是强引用，
        它保存的对象实例，
        只有在JVM即将OutOfMemory才会被GC，
        这个特性使得它特别适合设计对象Cache，
        我们希望被缓存的对象最好始终常驻内存， 但如果JVM内存吃紧， 为了不发生OutOfMemoryError导致系统崩溃，
        必要的时候也允许JVM回收Cache的内存，
        待后续合适的时机再把数据重新Load到Cache中， 这样可以使系统设计的更具有弹性

19. Java's Exception inheritance
    java.lang.Object
      ->Throwable
        ->Errors
        ->Exceptions
          ->RuntimeException
          ->Exception
  19.1 Errors
        非正常的错误，合理的程序不应该try-catch Errors
  19.2 Unchecked Exceptions:
    19.2.1 Error与RuntimeException
    19.2.2 Unchecked Exception通常指本不应该发生的异常，
           发生在运行时期， 具有不确定性， 主要由程序逻辑问题所引起
           如： ArrayIndexOutOfBoundException, ClassCastException
           从语言本身的角度， 程序不应该catch这类异常， 出现这类错误， 程序就应该立即停止
    19.2.3 RuntimeException

  19.3 Checked Exceptions:
    19.3.1 Exception
    19.3.2 它仅仅是程序运行的一种条件， 而非严重错误，鼓励去catch这类异常
           这类exception通常由外部环境引起，而非程序本身错误，
           如: 没有文件的读写权限 （IOException)

  19.4 try{} 里有一个 return 语句，那么紧跟在这个 try 后的 finally{} 里的 code 会不会被执行，什么时候被执行，在 return 前还是后?
    19.4.1 会执行，在方法返回调用者前执行。
    19.4.2 Java 允许在 finally 中改变返回值的做法是不好的，
           因为如果存在 finally 代码块，try 中的 return 语句不会立马返回调用者，
           而是记录下返回值待 finally 代码块执行完毕之后再向调用者返回其值，
           然后如果在 finally 中修改了返回值，这会对程序造成很大的困扰
    19.4.3 只有在try里面使用System.exit(0)来退出JVM的情况下， finally才不会被执行

  19.5 Java Compiler要求方法必须声明抛出可能发生的Checked Exception,
       但是并不要求必须声明抛出未被捕获的RuntimeException

  19.6 不要将异常处理用于正常的控制流
       （良好的API不应该强迫它的调用者为了正常的控制流而使用异常）

20. Thread.sleep() 与 Object#wait()
  20.1 Thread.sleep()在没有synchronized关键字的情况下也会运行
       Object#wait()必须在synchronized的作用域及临界区下运行， 否则会报IllegalMonitorStateException
  20.2 Thread.sleep()不会释放共享资源的锁，
       Object#wait()会释放共享资源的锁

21. lock与synchronized的区别
      公平锁： 由等待时间最长的线程先进入共享资源
      非公平锁： 多个线程抢一个钥匙
  21.1 lock
    lock是对象级别的锁 （也叫程序级别的锁）
    可以自己定义 Lock lock = new ReentrantLock(true);//true 表示创建的是公平锁
    Condition condition = lock.newCondition();//condition 是lock的一个封装类， 里面封装了await()和signalAll(), 和lock锁配套使用
  21.2 synchronized
    synchronized是jvm级别的非公平锁， 我们无法把控

    Java 内存溢出（java.lang.OutOfMemoryError）的常见情况和处理方式总结 http://outofmemory.cn/c/java-outOfMemoryError

22. 学习sql
23. java对integer，long的缓存，
      Long l1 = 9;
      Long l2 = 9;
      l1 == l2， 因为他们都指向缓存
24. dubbo 架构
25. cookie and redis
26. 复习Spring
27. 复习数据结构， 二叉树的广度优先搜索
28. 翻转LinkedList
29. Spring 中Interceptor 与filter的区别，联系， 应用场合
30. 为什么wait(), notify()和notifyAll() 被定义在Object类里？
    Java的每个对象都有一个锁（monitor, 也可以视为监视器), 并且wait(), notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。
    在Java的线程中， 并没有可供任何对象使用的锁和同步器，
    这就是为什么这些方法是Object类的一部分，
    这样Java的每个类都有用于线程间通信的基本方法

31. 为什么wait(), notify()和notifyAll()必须在同步方法或者同步块中被调用？
      当一个线程需要调用对象的wait()方法时，这个线程必须拥有该对象的锁， 接着它就会释放该对象的锁， 并进入等待状态， 直到其他线程调用这个对象上的notify()方法
      同样， 当一个线程需要调用对象的notify()方法时， 它会释放这个对象的锁， 以便其他在等待的线程可以得到这个对象的锁
      所以：
        wait(): means wait for object's lock, use it, and release it
        notify(): means notify other another waiting thread, that the current thread has released the Object's lock

32. 
