Thyme Leaf Notes
Using Text
1.Syntax of extracting "MESSAGE" from XXX.properties files
  #{KEY}
  Note: this is Thymeleaf standard expression syntax, message expression

2. Default property file location:
   i.e. find message for /WEB-INF/templates/home.html in the same folder with the same name as the template, like:
        /WEB-INF/templates/home_en.properties
        /WEB-INF/templates/home_es.properties
        /WEB-INF/templates/home.properties, this is the default text file if no locale is matched

3. Specialized expressions in the template that are used to extract
   request parameter,
   request, session and application attributes
   (from WebContext object in the controller) to presentation templates
   ${x}, will return  a variable x stored into the Thymeleaf context or as a request attribute
   ${param.x}, will return a request parameter called x (which might be multivalued)
   ${session.x}, will return session attribute called x
   ${application.x}, will return a servlet context attribute called x
   Note the above syntax is OGNL(Object-Graph Navigation Language)

4. Ask the templateEngine to process template by **name**
  i.e. templateEngine.process("FILE_NAME", ctx, response.getWriter())

5. Very important Standard Expression Syntax, page17 of usingthymeleaf.pdf
  5.1 Simple expressions
    5.1.1 Variable Expressions: ${ },
          OGNI(Object-Graph Navigation Language) syntax

    5.1.2 Selection Variable Expressions: *{ },
          evaluates expressons on selected objects rather than on the whole context
          if there is no selected object, *{ } expression degenerates to ${ } expression
          Note: **selected** means the result of an expression using the **th:object** attributes
                it should be used in a subelement of a **th:object** element.
                "*"represents the parent's variable expression

    5.1.3 Message Expressions: #{ }

    5.1.4 Link URL Expressions: @{ }, used as value of <a href="HTML_NAME" th:href="@{ }">URL_TEXT</a>
          Different types of URLs:
            Absolute URLs: http://www.thymeleaf.org
            Relative URLS:
              page-relative: i.e. user/login.html
              context-relative: /itemdetails?id=3 (context name in server will be added automatically), the directory structure is /webapp/WEB-INF/templates/itemdetails.html
              server-relative: ~/billing.processInvoice (allows calling URLs in another context(application) in the same server)
              protocol-relative: //code.jquery.com/jquery-2.0.3.min.js
          Note: we can add parameters by using () operator at the end of URL, URL encoding will be automatically performed

    5.1.5 Fragment Expressions: ~{ },
          Fragment expressions are an easy way to represent fragments of markup(HTML, etc.)
          and move them around templates.
          This allow page writers to replicate them, pass them to other templates as arguments
          The most common use is for fragment insertion using **th:insert** or **th:replace**
          i.e.  <div th:insert="~{commons :: main}">...</div>

  5.2 Literals
    5.2.1 Text literals: 'one text', 'Another one!', ...,
          Only ' need to be escaped by \'
    5.2.2 Number literals: 0, 34, 3.0, 12.3, ...
    5.2.3 Boolean literals: true, false
    5.2.4 Null literal: null
    5.2.5 Literal tokens: one, sometext, main, ...
  5.3 Text operations
    5.3.1 String concatenation: +
    5.3.2 Literal substitutions: |The name is ${name}|,
          allows for an easy formatting of strings containing values from variables
          without the need to append literals with '...' + '...'
          Note: only *variable expression ${} is allowed inside Literal substitution |...|
  5.4 Arithmetic operations
    5.4.1 Binary operations: +, -, *, /, %,
          these operators can be appliced inside OGNL variables
    5.4.2 Minus sign (unary operator): -
  5.5 Boolean operations:
    5.5.1 Binary operators: and, or
    5.5.2 Boolean negation (unary operator): !, not
  5.6 Comparisons and equality:
    5.6.1 Comparators: >, <, >=, <= (gt, lt, ge, le)
    5.6.2 Equality operators: ==, != (eq, ne)
  5.7 Conditional operators:
    5.7.1 If-then: (if)?(then)
    5.7.2 If-then-else: (if)?(then):(else)
    5.7.3 Default: (value)?:(defaultValue)
  5.8 Special tokens:
    5.8.1 No-Operation: _,
          the idea behind this token is to specify that the desired result for an expression is to do nothing

6. The xxx.properties file is used as "data" of the presentation template.
   The content does not need to be static,
   which means we can specify place holders in VALUE string in the xxx.properties file
   conforming the **java.text.MessageFormat**
   i.e.
    6.1 in xxx.properties file
      home.welcome=Welcome to our <b>fantastic</b> grocery store, {0}!
    6.2 in presentation html
      <p th:utext="#{home.welcome(${session.user.name})}"> <!-- Note we are supplying value to the key by using ( ) operator -->
        Welcome to our grocery store, Sebastian Pepper!
      </p>
    6.3 the message key itself could come from a variable
      <p th:utext="#{${welcomeMsgKey}(${session.user.name})}">
        Welcome to our grocery store, Sebastian Pepper!
      </p>

7. Spring MVC-enabled application OGNL will be replaced with SpringEL,
   but its syntax is very similar to that of OGNL

8. In OGNL, access to properties can also be made by using [ ],
   and writing the name of the property as a **variable** or **between single quotes** or **index**.

9. When evaluating OGNL expressions on **the context variables**, some objects are made available to expressions for higher flexibility.
   These objects will be referenced starting with the # symbol:
   #ctx, the context object
   #vars, the context variables
   #locale, the context locale
   #request, (only in Web Context) the HttpServletRequest object
   #response, (only in Web Context) the HttpServletResponse object
   #session, (only in Web Context) the HttpSession object
   #servletContext, (only in Web Context) the ServletContext object

   Expression Utility Objects:
   #execInfo, information about the template being processed
   #message, methods for obtaining externalized messages inside variables expression,
             in the same way as they would be obtained using #{ } syntax
   #uris, methods for escaping parts of URLs/URIs
   #conversions, methods for executing the configured **conversion service**(if any)
   #dates, methods for java.util.Date objects, formatting, component extraction, etc.
   #calendars, analogous to #dates, but for java.util.Calendar objects
   #numbers, methods for formatting numeric objects
   #strings, methods for String objects: contains, startsWith, prepending, appending, etc.
   #objects, methods for objects in general
   #bools, methods for boolean evaluation
   #arrays, methods for arrays
   #lists, methods for lists
   #sets, methods for sets
   #maps, methods for maps
   #aggregates, methods for creating aggregates on arrays or collections
   #ids, methods for dealing with id attributes that might be repeated(i.e. as a result of an iteration)

10. Data Conversion/Formatting
  Syntax: ${{}} or *{{}},
          Instructs Thymeleaf to pass the result of the expression to the conversion service
          and ask it to perform a formatting operation before writing the result.
          Note: the conversion service (Implementation of IStandardConversionService) has to be registered in advance

11. Preprocessing
  Syntax: _NORMAL_EXPRESSION_,
          Preprocessed expressions are exactly normal ones, but appear surrounded by a double underscore symbol.
          i.e. _${VARIABLE_EXPRESSION}_
          preprocessing is an execution of the expressions done before the normal ones,
          that allows for modification of the expression that will eventually be executed.
