Introduction to Apache ActiveMQ
1. classic RPC (Remote Procedure Calls) is considered tightly coupled

2. loose coupling throughout a system can lead to EDA (Event-Driven Architecture)

3. SOA (Service-Oriented Architecture), whose backbone is using a service for a specific task

4. brew installed activemq location:
    /usr/local/Cellar/activemq/5.13.3

5. JMS,
    it is not a MOM (Message-Oriented Middleware),
    It is an API that abstracts the interaction between messaging clients

6. concepts:
  6.1 JMS producer: a client application that creates and sends JMS messages.
  6.2 JMS provider: the implementation of the JMS interfaces, which is ideally written in 100% pure Java
  6.3 JMS domains: the two styles of messaging that include "point-to-point" and "publish/subscribe"
  6.4 JMS client: an application is written using 100% pure Java to send and receive messages.
  6.5 Non-JMS client: an application is written using the JMS provider's native client API to send and receive messages instead of JMS
  6.6 JMS consumer: a client application that receives and processes JMS messages.
  6.7 JMS message: the most fundamental concept of JMS; sent and received by JMS clients
  6.8 administrative object: preconfigured JMS objects that contain provider-specific configuration data for use by clients.
                             These objects are typically accessible by client via JNDI
  6.9 connection factory: clients use a connection factory to create connections to the JMS provider
  6.10 destination: an object to which messages are addressed and sent and from which messages are received.

7. The MessageConsumer can consume messages either synchronously by using one of the receive() methods,
   or asynchronously by providing a MessageListener implementation to the consumer.
   The MessageListener.onMessage() method is invoked as messages arrive on the destination.
   Note:
    there is no method for setting the destination on the MessageConsumer.
    Instead the destination is set when the consumer is created using the Session.createConsumer()

8. Headers set automatically by the client's send() method:
  8.1 JMSDestination, destination to which the message is being sent
  8.2 JMSDeliveryMode,
    8.2.1 persistent:
            default, advises the JMS provider to persist the message.
            message will not be lost if the provider fails.
            A JMS provider must deliver a persistent message once and only once
    8.2.2 nonpersistent:
            instructs the JMS provider not t persist the message.
            if the JMS provider fails, the message may be lost,
            but it won't be delivered twice.
  8.3 JMSExpiration,
        The time that a message will expire. (in milliseconds)
        default is 0, which has a special meaning of never expire.
  8.4 JMSMessageID,
        a string that uniquely identifies a message that's assigned by the JMS provider and must begin with ID.
        The message ID can be used for message processing or for history purpose in a message storage mechanism.
        It can also be turned of
  8.5 JMSPriority,
        used to assign a level of importance to a message.
  8.6 JMSTimestamp,
        denotes the time the message was sent by the producer to the JMS provider.
  8.7 JMSCorrelationId
        Used to associate the current message with a previous message.
        This header is commonly used to associate a response message with a request message.
        The value of the JMSCorrelationID can be one of the following:
        8.7.1 a provider-specific message ID
        8.7.2 an application-specific String
        8.7.3 a provider-native byte[] value
  8.9 JMSReplyTo
        used to specify a destination where a reply should be sent.
        commonly used for request/reply style messaging
  8.10 JMSType
        used to semantically identify the message type.
        has nothing to do with the payload Java type of the message
  8.11 JMSRedelivered,
        used to indicate the liklihood that a message was previously delivered but not acknowledged.

9. JMS message properties
    they are simply additional headers that can be specified on a message.
    9.1 Custom properties
    9.2 JMS-defined properties
    9.3 provider specific properties

10. JMS domains
  10.1 point-to-point domain,
        similar to "email system",
        message destination is "queue"
        one message is delivered from one producer to one consumer, and only once
  10.2 publish/subscribe domain
        message destination is "topic"
        any message sent to the topic are automatically delivered to all subscribers

11. distinguishing "message durability" from "message persistence"
  11.1 message durability can only be achieved with "pub/sub domain"
       It's registered with the topic subscription to tell tell the JMS provider to preserve the subscription state in the event that the subscriber disconnects.
  11.2 message persistence is independent of the message domain.
       It is a "QoS" used to indicate the JMS application's ability to handle missing messages in the event of a JMS provider failure.

12. administrative objects
  12.1 ConnectionFactory
        JMS clients use the ConnectionFactory object to create connections to a JMS provider.
        JMS connections are used by JMS clients to create javax.jms.Session objects that represent an interaction with the JMS provider
  12.2 Destination
        encapsulates the provider-specific address to which messages are sent and from which messages are consumed.

13. Multithreading in JMS applications
  13.1 ConnectionFactory, Connection and Destination objects are required to support concurrent access
  13.2 Session, MessageProducer and MessageConsumer do not support concurrent access. (because they should not be shared across threads)

Connecting to ActiveMQ over the network (all by configuration, in stead of code modification)
1. summary of network protocols used for client-broker communication
  1.1 TCP, default network protocol for most use cases.
           Note: TCP protocol ensures that messages will not be lost on the network
  1.2 NIO (New I/O), provide better scalability for connections from producers and consumers to the broker
  1.3 UDP, when need to deal with the firewall between client and the broker.
  1.4 SSL (Secure Sockets Layer), when you want to secure communication between clients and the broker
  1.5 HTTP(S), when you need to deal with the firewall between the clients and the broker
  1.6 VM, when your broker and clients communicate with a broker that is embedded in the same Java Virtual Machine (JVM)

2. Transport connectors:
    are connections between clients (consumers/publishers) and brokers
   Network connectors:
    are channels that are configured between brokers so that brokers can communicate with one another.

3. failover protocol
    used to implement automatic reconnection.

4. Multicast-connector
    One of the fundamental concepts of IP multicast is "group address"
    The group address is an IP address in the range of
      "224.0.0.0 to 239.255.255.255"
    used by both sources and receivers

5. multicast is used for discovery on the broker side,
   discovery protocol is used on the client side
    Note: discovery protocol use multicast to discover available brokers and randomly choose one to connect to

6. peer connector
    a utility transport that is a superset of a VM connector that creates a peer-to-peer network of embedded brokers
    when broker is started with the peer protocol URI,
    the application will automatically start an embedded broker (just as was the case with the VM protocol),
    but will also configure the broker to establish network connections to other brokers in the local network with the same group name

7. Fanout connector
    is another utility connector used by clients to simultaneously connect to multiple brokers and replicate operations to those brokers
    Note:
      fanout is recommended only for producing messages instead of consuming messages
      and to multiple nonconnected brokers

8. summary of protocols used to network brokers
  8.1 Static,
        used for defining networks of brokers with known addresses
  8.2 Failover,
        used to provide reconnection logic for clients to the network of brokers or a single broker
  8.3 Multicast,
        used for defining dynamic networks of brokers (broker addresses are not statically defined)
  8.4 Discovery,
        used for clients to connect to dynamic network of brokers
  8.5 Peer,
        used to easily connect multiple embedded brokers
  8.6 Fanout,
        used to produce messages to multiple unconnected brokers

Securing ActiveMQ
1. Authentication
    the process used to verify the integrity of an entity or a user that's requesting access to a secured resource

2. Authorization
    the process used to determine the access rights of a user or an entity to a secured resource

3. Authentication and Authorization's relationship
    Authorization depends upon authentication to prevent unauthorized users from entering the system.
    Authorization determines whether a user has the privileges to perform certain actions.
    such privileges are often referred to as ACL (Access Control List)

4. JAAS
    Java Authentication and Authorization Service

Creating Java application with ActiveMQ
1. Using a pure Spring XML syntax is easy to do with ActiveMQ.
   All you have to do is define the BrokerService as a bean
   and any dependencies in the Spring configuration file.

2. It is common in enterprise Java development to use Spring factory beans to expose beans that are themselves factories.
   The purpose of Spring factory beans is to instantiate a factory that requires a complex configuration.
   An ActiveMQ broker can be started up using the BrokerFactoryBean (an alternative)

3. create and sending JMS messages
    we create an appropriate JMS map message to hold all of the event data.
    to send the message, the JmsTemplate's send() method will be used

4. ActiveMQ can be viewed not only as a separate Java infrastructure application,
   but also as a Java module that can be easily integrated in your Java applications.

Integrating ActiveMQ with application servers
1. application server
    application servers provide a container architecture that accepts the deployment of an application
    and provides an environment in which it can run.
  1.1 web container: application server implements the Java Servlet specification, e.g. Tomcat, Jetty
  1.2 Java EE Container: application server implements Java EE family of specification, e.g. JBoss, Apache Geronimo

2. JMS connections can be created from a connection factory that's registered with the application server.
   JNDI (Java Naming and Directory Interface) implementation can be used to expose objects to be used by applications deployed to the container.
   Objects such as JDBC drivers, JMS resources, transaction mangers and so forth can be configured to be accessed using the JNDI API.

3. local JNDI and global JNDI
  3.1 local JNDI,
        used to configure objects that will only be exposed to a specific application
  3.2 global JNDI,
        used to expose objects to any application in the entire we container

4. Integrating with Tomcat
  4.1 using local JNDI to integrate ActiveMQ
        the JNDI resources are defined in a file named META-INF/context.xml
  4.2 using global JNDI to integrate ActiveMQ with Tomcat
        the global JNDI configuration in Tomcat requires a bit additional configuration
        and copying some JARs into the Tomcat lib directory
        In this style of configuration, the JNDI resources are defined in configuration files that live with the Tomcat application server named
        conf/server.xml and conf/context.xml

5. resources like ActiveMQ are registered in (exposed by) "containers",
   which can later be accessed by using JNDI lookup by the application.
   Spring supports such JNDI look up.
