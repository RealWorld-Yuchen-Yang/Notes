Getting Started
1. Redis (REmote DIctionary Server)
    is a NoSQL (Not only SQL) advanced key-value data store.

2. $ redis-server, starts the redis server

3. $ redis-cli, starts the redis command line interface
      after starting the cli,
      we can interact with Redis server with commands
      it is mainly used for debugging
      3.1 SET key value
      3.2 GET key
      3.3 HELP cmd
      3.4 KEYS pattern, returns all stored keys that match a pattern

4. Node.js comes with a package manager called NPM (Node Package Manager),
   it is responsible for managing and installing all Node.js dependencies and libraries.
   All Node.js examples in this book require the library redis, which can be installed with NPM
   $ cd /Users/yuchenyang/Documents/GitProjects/RedisProject
   $ npm install redis

5. $node XXX.js,
    "node", is Node.js interpreter, it is used to run the XXX.js file

6. Redis data types
  6.1 Strings
    6.1.1 a String can behave as an integer, float, text string, or bitmap based on its value and the commands used.
    6.1.2 use cases:
      6.1.2.1 cache mechanisms,
                commands include: GET. SET, MSET (multiple set), MGET
      6.1.2.2 cache with automatic expiration
                commands include: SETEX, EXPIRE, EXPIREAT
                Help Command: TTL key, returns one of the following
                  a positive integer: amount of seconds a given key has left to live
                  -2: if the key is expired or does not exist
                  -1: if the key exists but has no expiration time set
      6.1.2.3 counting
                commands include: INCR, INCRBY, DECR, DECRBY, INCRFLOATBY
  6.2 Lists
    6.2.1 Lists can be used as a simple collection, stack, or queue
    6.2.2 use cases:
      6.2.2.1 event queue
      6.2.2.2 storing most recent user posts
      6.2.2.3 Commands
                LPUSH listName value, inserts data at the beginning of a list
                RPUSH listName value, inserts data at the end of a list
                LLEN listName, returns the length of a list
                LINDEX listName index, returns the element in a given index
                  Note: list starts from left, ends in right
                        front index is positive, end index is negative
                LRANGE listName, returns an array
                LPOP, RPOP, BRPOP, BLPOP (means block left pop)

  6.3 Hashes
    6.3.1 hashes are great for storing objects
    6.3.2 commands
            HSET hashName key value,
            HMSET(hash multiple set),
            HINCRBY key value number,
            HINCRFBYFLOAT,
            HDEL hashName key value, delete key-value pair
            HGETALL hashName, returns an array of all field/value pairs in a hash
            HSCAN, is a better alternative of HGETALL,
                   it returns a cursor and the Hash fields with their values in chunks.
                   HSCAN needs to be executed until the returned cursor is 0,
                   in order to retrieve all the fields in a Hash
            HKEYS hashName,
            HVALS hashName

7. Redis is single threaded,
   which means that it always executes one command at a time.

Advanced Data Types
1. Sets
  1.1 use cases
    1.1.1 Data filtering
    1.1.2 Data grouping
    1.1.3 membership checking (checking whether a user is on a blacklist)
  1.2 commands
        SADD setName values,
        SINTER set1 set2 ..., returns the intersection array of the two sets
        SDIFF set1 set2 ..., returns members uniquely exists in set1
        SUNION set1 set2 ...,
        SRANDMEMBER setName, return a random member of the set
        SREM setName value,   removes and returns members from a set
        SCARD setName returns the number of members in a set
        SMEMBERS setName, returns an array with all members of a set

2. Sorted Sets
  2.1 Sorted Set is very similar to a Set,
      but each element of a Sorted Set has an associated score.
  2.2 use cases
    2.2.1 build a real time waiting list for customer service
    2.2.2 show a leaderboard of a massive online game that displays the top players,
          users with similar scores,
          or the scores of your friends.
    2.2.3 build an autocomplete system using millions of words
  2.3 commands
        ZADD sortedSet score value
        ZRANGE, ZRANGEBYLEX, ZRANGEBYSCORE, ZREVRANGE, ZREVRANGEBYLEX, ZREVRANGEBYSCORE
          Note,
            ZRANGE, return elements lowest -> highest
            ZREVRANGE, return elements highest -> lowest
        ZREM sortedSet value, removes the value
        ZSCORE,
        ZRANK,
        ZREVRANK

3. Bitmaps
  3.1 Bitmap is not a real data type in Redis,
      under the hood, it is a string,
      bitmap is a sequence of 0 an 1,
      bitmap indices are referred to as "offsets"
      bitmap can be used in analytics
  3.2 commands
        SETBIT bitMap offest 0/1, give a value to a Bitmap offset (0|1)
        GETBIT bitMap offset
        BITCOUNT, returns the number of bits marked as 1 in a Bitmap
        BITOP operation destinationKey bitMap1 bitMap2,

4. HyperLogLogs
  4.1 HyperLogLogs is not actually a real data type in Redis.
      it is an algorithm that uses randomization in order to provide a very good approximation of the number of unique elements that exist in a set.
      it runs in O(1) time complexity
      its underlying data type is String
  4.2 commands
        PFADD hyperLogLogsName string1 string2 ...,
        PFCOUNT hyperLogLogs1 hyperLogLogs2 ..., returns the number of unique elements
        PFMERGE destinationKey hyperLogLogs1 hyperLogLogs2 ..., merge logs into destinationKey log
        Note: PF (Philippe Flajolet, the author of the algorithm)
  4.3 use cases
    4.3.1 counting the number of unique users who visited a website
    4.3.2 counting the number of distinct terms that were searched for on your website on a specific date or time
    4.3.3 counting the number of distinct hashtags that were used by a user
    4.3.4 counting the distinct words that appear in a book

Time Series
1. FLUSHALL, removes all of the data from Redis.

2. we can optimize Strings by using Hashes.
   Small Hashes are encoded in a different data structure, called a ziplist.
   This structure is memory optimized.
   There are two conditions for a Hash to be encoded as a ziplist
   2.1 It must have fewer fields than the threshold Set in the configuration
       hash-max-ziplist-entiries, (default is 512)
   2.2 No field value can be bigger than
       hash-max-ziplist-value, (default is 64 bytes)

Commands
1. Pub/Sub
    1.1 commands
          PUBLISH,
          SUBSCRIBE,
          UNSUBSCRIBE,
          PSUBSCRIBE, (Pattern Subscribe) pattern is the glob-style pattern
          PUNSUBSCRIBE, (Pattern Unsubscribe
          PUBSUB subcommands, introspects the state of the Redis Pub/Sub system.
                              subcommands include
                                CHANNELS, returns all active channels (at least one subscriber)
                                NUMSUB, returns the number of clients connected to channels via the SUBSCRIBE command
                                NUMPAT, returns the number of clients connected to channels via the PSUBSCRIBE command

    1.2 Once a Redis client executes the command SUBSCRIBE or PSUBSCRIBE,
        it enters the subscribe mode and stops accepting commands,
        except for the commands SUBSCRIBE, PSUBSCRIBE, UNSUBSCRIBE, PUNSUBSCRIBE

2. Transactions
  2.1 definition: a transaction in Redis is a sequence of commands executed in order and atomically.
  2.2 commands
        MULTI, marks the beginning of a transaction
        EXEC, marks the end of a transaction
        DISCARD, prevent a transaction from being executed
        WATCH, implements an optimistic lock on a group of keys,
               marks keys as being watched,
               so that EXEC executes the transaction only if the keys being watched were not changed.
               otherwise return a null reply and the operation needs to be repeated.
        UNWATCH, remove keys from watch list
  2.3 unlike in traditional SQL databases, transactions in Redis are not rolled back if they produce failure

3. Pipelines
  3.1 definition: a pipeline is a way to send multiple commands together to the Redis server
                  without waiting for individual replies
  3.2 RTT (Round Trip Time), the time taken for a Redis client to send a command and obtain a reply from the Redis server.
  3.3 Redis recommands sent in a pipeline must be independent.
      they run sequentially in the server (the order is preserved),
      but they do not run as a trasnaction.
      pipeline can save a lot of network time,

4. Missellaneous commands
  4.1 INFO,
        returns all Redis server statics
  4.2 DBSIZE
        returns the number of existing keys in a Redis server
  4.3 DEBUG SEGFAULT
        crashes the Redis server process by performing an invalid memory access.
  4.4 MONITOR
        shows all the commands processed by the Redis server in real time.
        (helpful for debugging)
  4.5 CLIENT LIST
  4.6 CLIENT SETNAME, used only for debugging
  4.7 CLIENT KILL ip|id|type
  4.8 FLUSHALL, deletes all keys from Redis
  4.9 RANDOMKEY, returns a random existing key name
  4.10 EXPIRE key second,
        key will be deleted after the specified amount of seconds
        negative timeoout will delete the key instantaneously
       EXPIREAT key UnixTimestamp
  4.11 TTL, returns the remaining time to live in seconds
       PTTL, return the remaining time to live in milliseconds
  4.12 PERSIST key,
        remove the existing timeout of a given key.
        return 1 if the timeout is removed
               0 if the key had no timeout
  4.13 SET key seconds value, SETEX = SET + EXPIRE
  4.14 EXISTS key,
        returns 1 if key exists
                0 if key does not exist
  4.15 PING
        returns "PONG" if client-server communication is clear
  4.16 MIGRATE host port key destination-db timeout [COPY] [REPLACE], moves a given key to a destination Redis server
  4.17 SELECT [0,15], changes the current database that the client is conneected to
                      it is not recommended to use multiple databases with redis
                      a better approach would be to use multiple redis-server processes rather than a single one,
                      so as to exploit multiple CPU cores.
  4.18 AUTH mySecret, authorize a client to connect to Redis
                      if authorization is enabled on the Redis server,
                      clients are allowed to run commands only after executing the AUTH command with the right authorization key.
  4.19 SCRIPT KILL, terminate non-write Lua script
       SHUTDOWN NOSAVE, terminate write Lua script
  4.20 SHUTDOWN, stops all clients, cause data to persist if enabled, and shuts down the Redis server
  4.21 OBJECT ENCODING key, returns the encoding used by a given key
  4.22 Data type optimizations
        all data types can use different encodings to save memory or improve performance.
        data types will use different encodings based on thresholds defined in the Redis server configuration
        in "redis.conf" file or by using CLI
    4.22.1 String
      4.22.1.1 int, string is represented by a 64-bit signed integer
      4.22.1.2 embstr, strings with fewer than 40 bytes
      4.22.1.3 raw, strings with more than 40 bytes
    4.22.2 List
      4.22.2.1 ziplist, used when listSize <= list-max-ziplist-entries
      4.22.2.2 linkedlist, used when listSize > list-max-ziplist-entries
    4.22.3 Set
      4.22.3.1 intset, used when setSize <= set-max-initset-entries
      4.22.3.2 hashtable, used when setSize > set-max-initset-entries
    4.22.4 Hash
      4.22.4.1 ziplist, used when (hashSize <= hash-max-ziplist-entries && hashValue <= hash-max-ziplist-value)
      4.22.4.2 hashtable, used when (hashSize > hash-max-ziplist-entries || hashValue <= hash-max-ziplist-value)
    4.22.5 Sorted Set
      4.22.5.1 ziplist, used when (sortedSetSize <= set-max-ziplist-entries && sortedSetValue <= zset-max-ziplist-value)
      4.22.5.2 skiplist and hashtable (sortedSetSize > set-max-ziplist-entries || sortedSetValue > zset-max-ziplist-value)

Common Pitfalls
1. bitmap will not always save space,
   when trying to come up with an optimization approach,
   it is better to use a benchmark tool.

2. it is better to use multiple server processes acting on a single database,
   instead of on multiple databases
   Redis is single threaded anyway

3. It is good practice to use namespaces when defining your keys in Redis,
   in order to avoid key name collisions,
   and to organize your keys based on your application section or area.
   In Redis, key's naming convention is to the solution
   syntax:
    namespace:keyName

4. reduce OS's swappiness
  4.1 swappiness to choose
    4.1.1 use a swappiness of 0 (entirely disable swapping) when your data always fits into the RAM
    4.1.2 use a swappiness of 1 (minimum amount of swapping) when you are not sure
  4.2 how to disable swapping
    4.2.1 disable swapping once
            sysctl -w vm.swappiness=0
    4.2.2 permanent disable
            in /etc/sysctl.conf, vm.swappiness=0

5. Redis should not use more tahn 50 percent of the available memory when any backup strategy is enabled.
   Make sure that you set up alarms for Redis memory usage.

6. should choose appropriate persistence strategy

Security Techniques
1. Redis's security mechanism is based on plain-text password,
   Redis does not implement ACL (Access Control List)

2. Obfuscating/disabling critical commands
    critical commands are FLUSHDB, FLUSHALL, CONFIG, KEYS, SAVE, etc.
    obfuscating command means renaming the command to a not well-known name
    by using "rename-command"
    e.g.
      rename-command FLUSHDB e0cc96ad2eab73c2c347011806a76b73

3. Run Redis on the loopback interface,
   In a scenario where a web application and the redis-server are running on the same machine,
   you should bind redis-server to the loopback interface (127.0.0.1),
   rather than a publicly accessible network interface

4. "iptable" program in Linux is a standard firewall.
   it defines network filters to control traffic input/output
     INPUT, this chain handles all packets that are addressed to your server
     OUTPUT, this chain contains the rules for the traffic created by your server
     FORWARD, this chain allows you to configure your server to route request to other machines
   Modification to the iptable rules are saved in memory,
   and they live until the next reboot or until iptable is restarted.
   To cause the modifications to persist,
   execute the program "iptables-save"

5. AWS (Amazon Web Services)

6. VPC (Virtual Private Cloud)
    a VPC is a pool of on-demand resources that run on a public cloud
    The resources are virtually isolated from different users of the different users of the same public cloud
    only machines on the same VPC can reach each other

7. many services that do not implement SSL encryption can take advantage of "stunnel".
   Redis can be combined with stunnel to encrypt all client-server communication.

8. 
