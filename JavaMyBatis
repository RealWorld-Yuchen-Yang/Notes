Getting started with MyBatis
1. Hibernate and MyBatis
  1.1 Hibernate:
        full-fledged ORM framework,
        statically map Java objects to database tables.
        encourages working with entity objects and generate SQL queries under the hood.
        even though Hibernate allows to execute native SQLs,
        but that might defeat the promise of a database-independent persistence.
  1.2 MyBatis
        map query results to Java objects
        embraces SQL, which can take advantage of database-specific features and prepare optimized SQL queries.

2. Hibernate's benefits
  If your application is driven by an object model
  and wants to generate SQL dynamically,
  MyBatis may not be a good fit for you.
  Also if you want to have a transitive persistence mechanism
  (saving the parent object should persist associated child object as well)
  Hibernate will be better suited for it.

3. MyBatis' benefit
  Have native support for SqlSession level cache,
  it caches query results by using ResultMaps

4. MyBatis' main configuration file:
    mybatis-config.xml

5. It is better off by using Mapper interfaces when doing SQL queries

6. Each Service thread should have its own instance of SqlSession,
   ,instances of SqlSession objects are not thread safe and should not be shared.
   The best scope of SqlSession is "method scope"

Bootstrapping MyBatis
1. MyBatis supports two types of transaction managers:
  1.1 JDBC
    The JDBC transaction manager is used where the **application** is responsible for
    managing the connection life cycle,
    that is "commit", "rollback" and so on.

  1.2 MANAGED
    The MANAGED transaction manager is used where the **application server** is responsible for
    managing the connection life cycle.

2. Mappers
  Mapper XML files contain the mapped SQL statements that will be executed by the application using **statement id**
  We need to configure the location of SQL Mapper files in mybatis-config.xml

3. DataSource
    MyBatis supports three built-in DataSource types: UNPOOLED, POOLED and JNDI
  3.1 UNPOOLED
    creates a new database connection every time for each user request
    and is not advisable for concurrent multiuser applications
  3.2 POOLED
    it will use one of the Connection objects readily available in the pool.
    thereby increasing performance
  3.3 JNDI
    uses the Connection pool configured in the application server and obtains a connection using a JNDI lookup.

SQL Mappers Using XML (important)
1. Invoking the mapped SQL queries defined in mapper xml
    we can create a Mapper interface with
      1.1 a fully qualified name that is the same as the namespace
      1.2 method signatures match the statement IDs, input parameters and return types

    e.g.
      mapper xml:
        <mapper namespace="com.mybatis3.mappers.StudentMapper">
          <select id="findStudentById" parameterType="int" resultType="Student">
            select stud_id as studId, name, email, dob from Students where
            stud_id=#{studId}
          </select>
        </mapper>

      mapper interface:
        package com.mybatis3.mappers;
        public interface StudentMapper
        {
          Student findStudentById(Integer id);
        }

2. ResultMaps are used to map the SQL SELECT statement's result to JavaBeans properties.
    we can define ResultMaps and reference this resultMap query from several SELECT statements.
    Note: this definition and reference are all in XML/Annotation

3. Extending ResutlMaps
    We can extend one <resultMap> query from another <resultMap> query,
    thereby inheriting the column to do property mappings from the one that is being extended.

4. We can set the properties of a nested object using the dot notation.

5. one-to-one mapping
  5.1 using nested result maps with association
        the <association> element can be used to load the **has-one** relationship
  5.2 using nested select

6. one-to-many mapping by using <collection>
    Note: the underlying SQL should use a join select
  6.1 mapping with nested ResultMap
  6.2 mapping with nested select
        Note: nested select approach may result in N+1 problems
              First the main query will be executed (1),
              and for every row returned by the first query,
              another select query will be executed (N queries for N rows)
              For large datasets, this could result in poor performance.

7. MyBatis supports passing multiple input parameters to a mapped statement
   and referencing them using the
    #{param}
   syntax

8. Cache
  8.1 By default, the first-level cache is enabled
    which means that if you invoke the same SELECT statement within the same SqlSession interface,
    results will be fetched from the cache instead of the database
  8.2 We can add global second-level caches by adding the <cache/> element in SQL Mapper XML files
      The second-level cache will be treated as a read/write;
      this means that the objects retrieved will not be shared and can safely be modified by the caller without it interfering
      with other potential modifications by other callers or threads.

Integration with Spring
1.By using the MyBatis-Spring module,
  we can configure the MyBatis beans in Spring ApplicationContext,
  and Spring will take care of
  1.1 initiating the **SqlSessionFactory**
  1.2 create a **SqlSession** object and inject it into the **DAO** or **Service** classes.

2 Once the SqlSessionFactory bean is configured,
  we need to configure the SqlSessionTemplate bean,
  which is a thread-safe Spring bean from which we can obtain thread-safe SqlSession objects.
  Because SqlSessionTemplate provides a thread-safe SqlSession objects,
  you can share the same SqlSessionTemplate instance with multiple Spring beans.
  Conceptually SqlSessionTemplate is similar to JdbcTemplate of the Spring DAO module.

3. We can use Spring's annotation-based transaction-handling mechanism
  3.1 configure the TransactionManager bean in Spring application context
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
          <property name="dataSource" ref="dataSource" />
        </bean>

  3.2 enable the annotation-based transaction management feature in Spring
        <tx:annotation-driven transaction-manager="transactionManager"/>

  3.3 Annotate the Spring service bean with the @Transactional annotation.
      **This indicates that each method in this service should run within a transaction**
      Spring will commit the operation if the method is completed successfully,
      and will rollback if any runtime exception occurs.
      Also Spring will take care of converting MyBatis Exceptions into appropriatee DataAccessExceptions.
