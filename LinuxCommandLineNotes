Navigation
  1. In Linux, filenames and commands are case sensitive

Exploring The System
  1. file
      determine file type
  2. ls
      list files of certain directory, can take multiple directories as input
  3. linux command line options:
      short version: -x
      long version: --x

Manipulating Files and Directories
  1. Wildcard:
    *, matches any character
    ?, matches any single character
    [characters], matches any character that is a member of the set characters
    [!characters], matches any character that is not a member of the set
    [[:class:]], matches any character that is a member of the specified class
      Commonly used character classes:
        [:alnum:], matches any alphanumeric character
        [:alpha:], matches any alphabetic character
        [:digit:], matches any numeral
        [:lower:], matches any lowercase letter
        [:upper:], matches any uppercase letter

  2. cp, copy files and directories.
    2.1 Useful options
      -a, --archive, copy the files and directories and all of their attributes, including ownerships and permissions
      -r, --recursive, recursively copy directories and their contents
      -u, --update, only copy files that either don't exist or are newer than the existing version
    2.2 example:
      cp -r dir1 dir2,
        copy the contents of directory dir1 to directory dir2.
        if directory dir2 does not exist, it is created

  3. mv, Move and rename files
    3.1 example:
      mv dir1 dir2,
        If directory dir2 does not exist, create directory dir2 and move the contents of
        directory dir1 into dir2 and delete directory dir1
        Note, here we do not need to declare "recursive" option
  4. ln, create links
    4.1 **ln file link**, create hard link
      4.1.1 meaning:
        by default, every file has a single hard link that gives the file its name.
        when we create a hard link, we create an additional directory entry for a file
        target and hard link's inode number(first field displayed by "ls -i") are the same, meaning they are the same file
        target and symbolic link's inode number are different
      4.1.2 limitations
        4.1.2.1 a hard link cannot reference a file outside its own file system(disk partition)
        4.1.2.2 a hard link cannot reference a directory
      4.1.3 explanation
        A hard link is indistinguishable from the file itself.
        And all hard links and its original's link count are the same
        Unlike a symbolic link, when you list a directory containing a hard link,
        you will see no special indication of the link.
        When a hard link is deleted, the link is removed but the contents of the file itself continue to exist.
        The file is deleted until all the links to the file are deleted

    4.2 **ln -s item link**, create symbolic link, where item is either a file or a directory
        when doing ls, the link will be shown as:
        **link -> item**,
        also the link is indicated as file type "l", which means link
      4.2.1 meaning:
        symbolic links were created to overcome the limitations of hard links.
        symbolic links work by creating a special type of file that contains a text pointer to the referenced file or directory
        it is the shortcut of the linked item
      4.2.2 creating:
        when creating symbolic link, you can either use absolute pathnames or relative pathnames.
        using "relative pathnames" is more useful, because it allows a directory containing symbolic links to be renamed/moved without breaking the links
      4.2.3 editing:
        editing contents will result in the original item
      4.2.4 deleting:
        deleting the symbolic link only deletes the link, not the original item.
        if the target is deleted before the link, the link is said to be broken.

Working With Commands
