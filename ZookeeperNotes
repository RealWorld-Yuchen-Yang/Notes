Zookeeper Basics
1. Recipes: implementation of primitives.

2. znodes: small data nodes, they are organized hierarchically as a tree. just like a file system.
  2.1 The absence of data often conveys important information about a znode.
  2.2 /workers znode, parent znode to all znodes representing a worker available in the system
  2.3 /tasks znode, is the parent of all tasks created and waiting for workers to execute them.
  2.4 /assign znode is the parent of all znodes representing an assignment of a task to a worker.

3. znode mode options:
  3.1 persistent
  3.2 ephemeral
  3.3 persistent_sequential
  3.4 ephemeral_sequential

4. For the quorum of servers, we should always shoot for an odd number,
   It this way can we tolerate more crashes of servers

5. My Zookeeper's installation directory
   /usr/local/Cellar/zookeeper/3.4.9/bin

6. Client: add tasks to the system
   Once the task znode is created, the master observes the event
   The master next checks the new task, get a list of available workers, and assign assignments to workers

7. Herd Effect and the scalability of watches
    When possible, we recommend avoiding such a use of ZooKeeper
    in which a large number of clients watch for a change to a given znode.

8. it is not always possible to handle failures based on the component in which they occur

9. Rather than trying to determine cause of failures,
   Zookeeper exposes two classes of failures: recoverable and unrecoverable
   9.1 recoverable, which are transient and should be considered relatively normal, e.g. network hiccups, server failures

   9.2 unrecoverable, the easiest and most common way to deal with this kind of failure is to exit the application.
                      e.g. session timeout, authentication failures, network outages for longer than the session timeout

10. you should try to avoid watching for the creation event of a znode.

11. careful monitoring of system load can help detect possibly problematic situations.
   well-designed multithreaded applications can avoid inducing overloads,
   clock synchronization programs can keep system clocks in sync

12. Access right must be set every time a znode is created,
    it does not inherit the access permissions from its parent

13. SASL (Simple Authentication and Security Layer) and Kerberos
  13.1 SASL
       It is a framework that abstracts the underlying system of authentication so that applications that use SASL can use any of the various protocols supported by SASL.
  13.2 Kerberos
       with respect to Zookeeper,
       SASL usually uses Kerbeross,
       which is an authentication protocol.
       SASL uses sasl for its scheme name and the id is the Kerberos ID of the client

14. When a znode is deleted and re-created, its version number is reset (means identical to before deletion).
    An application that tries to make version check after a znode is re-created might fall into this trap

15. If clients of an application communicate only by reading and writing to ZooKeeper,
    the application shouldn't worry about sync.
    sync exists because communication outside ZooKeeper may lead to a problem often referred to as a "hidden channel"

16. Order with the Synchronous API and Multiple Threads
     Zookeeper will deliver the responses in order,
     but it is possible that due to thread scheduling,
     the result of an operation submitted will be processed first.

17. In general, it is not a good idea to mix synchronous and asynchronous calls.
**************************************************************************************
1. Apache Kafka uses Zookeeper to detect crashes, to implement topic discovery, and to maintain production and consumption state for topics

2. Zookeeper servers manages critical application data related to coordination.
   However it is not for bulk storage.
   for bulk storage, you can either use db or distributed file system.

3. To implement a master-worker system, we must resolve 3 problems:
  3.1 master crashes
  3.2 worker crashes
  3.3 communication failure
        3.3.1 Zookeeper enables clients to say that some data in the Zookeeper state is ephemeral.
        3.3.2 Zookeeper ensemble requires that clients periodically notify that they are alive.
              If a client fails to notify the ensemble in a timely manner,
              then all ephemeral state belonging to this client is deleted.

4. requirement for master-worker architecture
  4.1 master election
        elect a master to assign tasks to workers
  4.2 crash detection
        master must be able to detect worker's crash/disconnect
  4.3 group membership management
        the master must be able to figure out which workers are available to execute tasks.
  4.4 metadata membership management
        the master and workers must be able to store assignment and execution status in a reliable manner.

5. Zookeeper has been designed with mostly consistency and availability in mind.
   it also provides read-only capability in the presence of network failure.

6. Watches and notifications in Zookeeper
    Instead of client polling,
    Zookeeper clients register with Zookeeper to receive notification of changes to znodes.
    watch: used by client to receive znode changes. it is a one time use

7. notifications preserve the order of updates the client observes.

8. Zookeeper server is responsible for declaring "session expiration"
   client is not able declare session expiration.
   if network partition happens, which lead to the client in connecting state,
   the client will remain in that state, for it can not tell if the session has expired.
   however, client can deliberately close the session.

9. ZooKeeper was designed to store coordination data:
    status information,
    configuration,
    location information, and so on.
