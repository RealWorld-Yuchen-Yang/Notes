Zookeeper Basics
1. Recipes: implementation of primitives.

2. znodes: small data nodes, they are organized hierarchically as a tree. just like a file system.
  2.1 The absence of data often conveys important information about a znode.
  2.2 /workers znode, parent znode to all znodes representing a worker available in the system
  2.3 /tasks znode, is the parent of all tasks created and waiting for workers to execute them.
  2.4 /assign znode is the parent of all znodes representing an assignment of a task to a worker.

3. znode mode options:
  3.1 persistent
  3.2 ephemeral
  3.3 persistent_sequential
  3.4 ephemeral_sequential

4.




10. Herd Effect and the scalability of watches
    When possible, we recommend avoiding such a use of ZooKeeper
    in which a large number of clients watch for a change to a given znode.

Dealing with failures
1. it is not always possible to handle failures based on the component in which they occur

2. Rather than trying to determine cause of failures,
   Zookeeper exposes two classes of failures: recoverable and unrecoverable
   2.1 recoverable, which are transient and should be considered relatively normal, e.g. network hiccups, server failures

   2.2 unrecoverable, the easiest and most common way to deal with this kind of failure is to exit the application.
                      e.g. session timeout, authentication failures, network outages for longer than the session timeout
   
