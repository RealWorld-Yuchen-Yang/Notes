The Evolutionary Architect
1. Guide lines:
    we should be worried about what happens between the services
    and be liberal in what happens inside

2. DRY (Don't Repeat Yourself) is a trade-off to coupling

How to Model Services
1. Good Service
    loose coupling and high cohesion,
    where cohesion means related behaviors stay together

    so we want to find boundaries within our problem domain help ensure that
    related behavior is in one place,
    and that communicate with other boundaries as loosely as possible

2. information in an internal model does not need to be all exposed to the external model

3. when you start to think about the bounded context that exist in your organization,
   you should be thinking not in terms of data that is shared,
   but about the capabilities those contexts provide the rest of the domain

4. DDD (Domain-Driven-Development)

Integration
1. Synchronous Versus Asynchronous
    These two different models of communication can enable two different idiomatic styles of collaborations:
    1.1 request/response
          request/response model can be either synchronous or asynchronous
          1.1.1 synchronous structure: send request and wait for response
          1.1.2 asynchronous structure: register callbacks, and send request later

    1.2 event-based
          client sends events (reporting changes on itself)
          by nature, this idiom is asynchronous

2. Orchestration Versus Choreography
    When dealing with the problem of managing business processes that stretch across the boundaries of individual services
    2.1 Orchestration:
          we rely on a central brain to guide and drive the process.
          Downside:
            the central service can be too much of a central governing authority

    2.2 Choreography (Better):
          we inform each part of the system its job and let it work out the details
          the instructions are emitted as events in an asynchronous manner.
          This structure is more decoupled
            e.g. publisher-subscriber pattern
          Downside:
            explicit business views are shifted to implicit
          Solution:
            one solution for dealing with this is to build a monitory system that explicitly matches the view of the business process

3. Request/Response Pattern
  3.1 RPC (Remote Procedure Call)
    3.1.1 Definition:
            technique of making a local call and having it execute on a remote service somewhere.
    3.1.2 Examples:
            RPCs relies on having an interface definition:
              SOAP, Thrift, protocol buffers
            RPCs does not require interface definition:
              Java RMI
  3.2 REST (REpresentational State Transfer)

4. keeping your middleware (MessageQueues) dumb and keep the smarts in endpoints

5. HTTP can handle large scale, but not low latency

6. If you already have a good resilient message broker,
   consider using it to handle publishing and subscribing events.
   But if you do not already have one,
   give ATOM a look.
   Note:
    ATOM is REST-compliant specification that defines semantics among other things
    for publishing feeds of resources

7. Service as a state machine
    services being fashioned around bounded context

8. Reactive Extensions (Rx)
    a mechanism to compose the results of multiple calls and run operations on them.
    Rx observes operation outcomes and react on them

9. DRY (Don't Repeat Yourself)
    do not violate DRY within microservices
    but be relaxed about violating DRY across all services

10. Semantic versioning
      Format: MAJOR.MINOR.PATCH
      by using semantic versioning,
      as a client, you could look at just the version number of a service and know if you can integrate with it
  10.1 MAJOR:
        When major number increments,
        it means that the backward incompatible changes have been made.
  10.2 MINOR:
        When MINOR increments,
        new functionality has been added that should be backward compatible.
  10.3 PATCH:
        a change to PATCH states that bug fixes have been made to existing functionality

11. Backends for Frontends
      restrict the use of backends to one specific user interface or application.
      I allows the team focusing on any given UI to also handle its own server-side components.
      You can see these backends as parts of the user interface that happen to be embedded in the server.
      (If we need an API authentication and authorization layer, this can sit between our BFFs and our UIs.)
      downside is that this approach can take on logic it shouldn't.

12. Strangler Pattern, and its realization by using microservices
      A strangler allows you capture and intercept calls to the old system.
      This allows you to decide if you route these calls to existing, legacy code, or direct them to new code you may have written.
      This allows you to replace functionality over time without requiring a big bang rewrite
      When it comes to microservices,
      rather than having a single monolithic application intercepting all calls to the existing legacy system,
      you may instead use a series of microservices to perform this interception.
      When capturing and redirecting the original calls become more complex,
      you may require the use of a proxy.

13. avoid database integration at all cost

14. Postel's law (robustness principle):
      be conservative in what you do,
      be liberal in what you accept from others
      Avoid breaking changes and the need to version by understanding Postelâ€™s Law and using tolerant readers.

Splitting the Monolith
1. Seam:
    a portion of code that can be treated in isolation and worked on without impacting the rest of the codebase.
    we want to identify seams that can become service boundaries

2. 
