Bootstarting Spring
1. you can start a Spring Boot project either through Spring Boot CLI or by using Spring Initializr

2. The Spring Initializr
    is ultimately a web application that can generate a Spring Boot project structure for you.
    It doesn't generate any application code,
    but it will give you a basic project structure and either a Maven or a Gradle build specification to build your code with

3. For the generated bare-bone project
  3.1 static directory:
        where you can put any static content (JavaScript, stylesheets, images, etc.)
  3.2 templates directory:
        where you can put templates that render model data

4. Create a new Spring Boot application in SpringToolSuite
  4.1 File -> New -> Spring Starter Project
  4.2 Location field specifies where the project will reside on the file system.
  4.3 Site Info
        describes the URL that will be used to contact the Initializr (Web Application).
        for the most part, you can ignore this section.
        If, however, you were to deploy your own Initializr server (by cloning the code at https://github.com/spring-io/initializr),
        you could plug in the base URL of your Initializr here.

5. using the Initializr from the Spring Boot CLI
    Syntax:
      $ spring init -dweb,jpa,security --build gradle -p war myapp
  5.1 init: create a baseline Spring Boot project
  5.2 -d: specify the dependencies,
        Note:
          1. there is no space between '-d' and dependency parameters
          2. Spring Boot starters enable you to specify build dependencies by "what they offer"
             rather than use explicit library names and version.
  5.3 --build: specify build file, default is Maven
  5.4 -p: packing option, default is 'jar'
  5.5 -x or directory: extract the downloaded '.zip' file to the current directory/specified directory
  5.6 $ spring help init: discover all of the parameters
  5.7 $ spring init -l: find out what choices are available for those parameters

Developing your first Spring Boot application
1. Remember that CLI's init command does not let you specify the project's root package or project name.
   The package name will default to "demo" and project name will default to "Demo"

2. Layout of typical Maven/Gradle projects
  2.1 the main application code is placed in src/main.java
  2.2 resources are placed in src/main/resources
  2.3 test code is placed in src/test/java
  2.4 optional test resources are placed in src/test/resources

3. The main class has two purposes in Spring Boot application: configuration and bootstrapping
   It is annotated with @SpringBootApplication
   It equals @Configuraion + @ComponentScan + @EnableAutoConfiguration
   You will almost never need to change this main class.
   If your application requires any additional Spring configuration beyond what Spring Boot auto-configuration provides,
   it is usually best to write it into separate @Configuration-configured classes.

4. The easiest way to build and run the application is to use the bootRun task with Gradle:
    $ gradle bootRun
   which is equal to:
    $ gradle build
    $ java -jar build/libs/XXX.jar

5. $ gradle dependencies
  display dependency tree that includes every library your project is using and their versions

6. @Entity, designating the class is a JPA entity

Customizing configuration
1. For Gradle, adding security to the application requires
    compile("org.springframework.boot:spring-boot-starter-security")

2. Although Spring Boot's auto-configuration and @ConditionalOnMissingBean make it possible for you to explicitly override any of the beans
   that would otherwise be auto-configured,
   it is not always necessary to go to that extreme.
   I can externalizing configuration with properties in stead.

3. Several ways to set properties for a Spring Boot application.
   (the following list is in order of precedence, any property set from a source higher in the list will override the same property set on a source lower in the list)
   3.1 Command-line argument
   3.2 JNDI attributes from java:comp/env
   3.3 JVM system properties
   3.4 Operating system environment variables
   3.5 Randomly generated values for properties prefixed with random.*
       (preferred when setting other properties, such as ${random.long})
   3.6 An application.yml or application.properties file outside of the application
   3.7 An application.yml or application.properties file packaged inside of the application
   3.8 Property sources specified by @PropertySource
   3.9 Default properties
   Note:
    as for the application.yml or application.properties files, they can reside in any of four locations
    Externally, in a /config subdirectory of the directory from which the application is run
    Externally, in a directory from which the application is run
    Internally, in a package named "config"
    Internally, at the root of the classpath

4. Spring Boot's property resolver is clever enough to treat camel-cased properties as interchangeable with similarly named properties with hyphens or underscores.
  e.g. the following are equivalent
    amazon.associatedId
    amazon.associated_id
    amazon.associated-id

5. Profiles can be activated by setting the 'spring.profiles.active' property

6. Working with profile-specific properties files
  6.1 If you are using application.properties to express configuration properties,
      you can provide profile-specific properties by creating additional properties files named with the pattern
      "application-{profile}.properties"
  6.2 meanwhile, any properties that are not specific to any profile or that serves as defaults can continue to be expressed in application.properties.

7. Customizing application error pages
    the easiest way to customize the error page is to create a custom view that will resolve for a view named "error"
    ultimately, this depends on the view resolver in place when the error view is being resolved.
    7.1 any bean that implements Spring's View interface and has a bean ID of "error" (resolved by Spring's BeanNameViewResolver)
    7.2 a Thymeleaf template named "error.html" if Thymeleaf is configured
    7.3 a FreeMarker template named "error.ftl" if FreeMarker is configured
    7.4 a Velocity template named "error.vm" if Velocity is configured
    7.5 a JSP template named "error.jsp" if using JSP views

8. default Spring Boot error attributes available to the error view
  8.1 timestamp,
        the time that the error occured
  8.2 status,
        the HTTP status code
  8.3 error,
        the error reason
  8.4 exception,
        the class name of the exception
  8.5 message,
        the exception message (if error was caused by an exception)
  8.6 errors,
        any errors from a BindingResult exception (if the error was caused by an exception)
  8.7 trace,
        the exception stack trace (if the error was caused by an exception)
  8.8 path,
        the URL path requested when the error occurred.

Testing with Spring Boot
1. you need to used @SpringApplicationConfiguration instead of @ContextConfiguration in integration test classes
   so as to get additional features, such as logging, loading of external properties, etc.
   other than loading the "application context"

2. Testing web applications
  2.1 Spring Mock MVC,
        enables controllers to be tested in a mocked approximation of a servlet container without actually starting an application server
  2.2 Web integration test,
        actually starts the application in an embedded servlet container (such as Tomcat or Jetty)
        enabling tests that exercises the application in a real application server
  2.3 when testing Spring MVC,
      "model is correctly created" and "redirected to correct view" should be the main concern.
      However, we do "not verify database manipulation"
  2.4 testing web security
        in order to test spring security,
        you must add Spring Security's test module to your build, for Gradle,
        testCompile("org.springframework.security:spring-security-test")

3. @WebIntegrationTest,
    by annotating a test class with @WebIntegrationTest,
    you declare that you want Spring Boot to not only create an application context for your test,
    but also to start an embedded servlet container.

4. Testing HTML pages with Selenium
  4.1 Selenium actually fires up a web browser and executes your test within the context of the browser.
  4.2 By creating a specific browser driver,
      Selenium use the driver to perform browser operations.
      Selenium test's gist
        for get, is to test if the desired element in the HTML page can be found
        for post, it first fills the form, then it test the corresponding result element's correctness

Taking a peed inside with the Actuator
1. Getting a bean wiring report
    by performing a GET request to /beans
    (http://localhost:8080/beans when running locally)
    you will be returned a JSON document describing every single bean in the application, its Java type, and any of the other beans it is injected with.
    all of the bean entries carry five pieces of information about the bean:
    1.1 bean,
          the name or ID of the bean in the Spring application context
    1.2 resource
          the location of the physical .class file (often a URL into the built JAR file, but this might vary depending on how the application si built and run)
    1.3 dependencies
          a list of bean IDs that bean is injected with
    1.4 scope
          the bean's scope (usually singleton, as that is the default scope)
    1.5 type
          the bean's Java type

2. /autoconfig endpoint
    describes why/why not beans are configured.
    2.1 positive matches, means they are activated.
    2.2 negative matches, means they are not activated.

3. Inspecting configuration properties
    The /env endpoint produces a list of all the environment properties available to the application

4. /mappings endpoint,
    producing endpoint-to-controller map,
    the "key" of each mapping is a string containing what appears to be the attributes of Spring MVC's @RequestMapping annotation
    the "value" of each mapping has two properties: "bean" and "method",
    4.1 bean,
          identifies the name of the Spring bean that the mapping comes from.
    4.2 method,
          gives the fully qualified method signature of the method for which the mapping is being reported.

5. /metrics endpoint
    gives runtime information of the application,
    the following is the gauges and counters reported by the /metrics endpoint
  5.1 gc.*, Garbage collector, information is from "java.lang.management.GarbageCollectorMXBean"
  5.2 mem.*, Memory, information is from "java.lang.Runtime"
  5.3 heap.*, Heap, information is from "java.lang.management.MemoryUsage"
  5.4 classes.*, Class loader, information is from "java.lang.management.ClassLoadingMXBean"
  5.5 processors,         System, from "java.lang.Runtime"
      uptime,                     from "java.lang.management.RuntimeMXBean"
      instance.uptime,            from "java.lang.management.RuntimeMXBean"
      systemload.average          from "java.lang.management.OperatingSystemMXBean"
  5.6 threads.*, Thread pool,     from "java.lang.management.ThreadMXBean"
  5.7 datasource.*, Data source, only available if there are one or more DataSource beans in the Spring application context
  5.8 httpsessions.*, only available if the application is served via an embedded Tomcat server
  5.9 counter.status.*,    HTTP, various gauges and counters for HTTP requests that the application has served.
      gauge.response.*,

6. /trace endpoint,
    reports details of all web requests,
    including request method, path, timestamp, request/response headers

7. /dump endpoint,
    produces a snapshot of current thread activity

8. /health endpoint,
    shows the system' status

9. /shutdown endpoint,
    once enabled (endpoints.shutdown.enabled=true),
    you can shutdown a specific application via
    $ curl -X POST http://localhost:8080/shutdown

10. /info endpoint,
    reports any information about your application that you might want to expose to callers
    Note: you can add any information to the /info endpoint's response by simply configuring properties prefixed with info.

11. Connecting to the Actuator remote shell
  11.1 It is an optional way to dig into the internals of a running application
  11.2 in order to use the remote shell, you need to add the following dependency to Gradle
        compile("org.springframework.boot:spring-boot-starter-remote-shell")
  11.3 after starting the application with the remote shell starter,
       you can use SSH to connect to the shell
       ssh user@localhost -p 2000
  11.4 CRaSH shell commands
    11.4.1 autoconfig
    11.4.2 beans
    11.4.3 endpoints
    11.4.4 metrics
  11.5
    endpoint list, lists all available end points
    endpoint invoke ENDPOINT_NAME, enables the endpoint

Deploying Spring Boot applications
1. Spring Boot applications can be packaged for deployment in several ways.
  1.1 Raw Groovy source,
      which is written by hand,
      whose target environment is Cloud Foundry and container deployment, such as Docker
  1.2 Executable JAR,
      which is produced by Maven, Gradle or Spring Boot CLI,
      whose target environment is Cloud environments, including Cloud Foundry, Heroku, as well as container deployment, such as Docker
  1.3 WAR,
      which is produced by Maven or Gradle,
      whose target environment is Java application servers or cloud environments such as Cloud Foundry

2. Deploying to an application server
  2.1 building a WAR file by using Gradle
    2.1.1 apply plugin: 'war'
    2.1.2 replace the existing 'jar' configuration with the 'war' configuration
      war{
        baseName = 'BASE_NAME'
        version = 'VERSION'
      }
  2.2 For Tomcat, deploying the WAR is just copying the WAR file into Tomcat's webapps directory
  2.3 For Tomcat, to access the webapp， point your browser to http://SERVER_ADDR:PORT/WAR_NAME
  Note:
    building Spring Boot applications for deployment into a conventional Java application server is largely a matter of creating
    a subclass of SpringBootServletInitializer and adjusting the build specification to produce a WAR file.

3. to enable the "production" profile before starting Tomcat,
   $ export SPRING_PROFILES_ACTIVE=production

4. enabling database migration
    By default, Spring Boot configures Hibernate to create schema automatically when using the embedded H2 database.
    More specifically,
    it sets Hibernate's 'hibernate.hbm2ddl.auto=create-drop'
    but it is not set when using other databases
    to enable such config, you should
    set 'spring.jpa.hibernate.ddl-auto=create-drop/create'
    A better option is to use a migration library,
    Spring Boot includes auto-configuration support for two popular database migration libraries
      Flyway, by adding Gradle dependency compile("org.flywaydb:flyway-core")
      Liquibase, by adding Gradle dependency compile("org.liquibase:liquibase-core")

5. Pushing to the Cloud
  5.1 Cloud Foundry,
        accepts built projects
  5.2 Heroku,
        arranges a Git repository for your application,
        it builds and deploys the application for you every time you push it to the repository

Spring boot developer tools
  Spring Boot's developer tools come in the form of a library that can be added to a project as a dependency
  For Gradle,
    compile "org.springframework.boot:spring-boot-devtools"
1. Automatic restart
    if activated, any changes to files on the classpath will trigger an application restart.
2. LiveReload support
    allows developers to see the result of rendered content  on the fly without refresh
3. Remote development
4. Development property defaults
