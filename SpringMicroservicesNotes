Demystifying Microservices
1. In traditional layered web applications,
   layers are physically spreadable,
   where as modules within a layer are hardwired.

2. in Microservices, the above mentioned hardwired modules are separated

3. principles of microservices
  3.1 single responsibility per service
  3.2 microservices are autonomous
      Note:
        one of the major differences between microservices and SOA is in their level of autonomy.
        while most SOA implementations provide service-level abstraction,
        microservices go further and abstract the realization and execution environment.

4. Jenkins is a CI tool

5. Scale Cube
    Scaling the x axis by horizontally cloning the application
    Scaling the y axis by splitting different functionality
    Scaling the z axis by partitioning or sharding the data

6. Microservices are one of the key enablers of DevOps.
   DevOps is widely adopted as a practice in many enterprises,
   primarily to increase the speed of delivery and agility.

7. In the cloud,
   the infrastructure is transparent to the application.
   and especially, the physical IP address cannot be assumed

8. Cloud Native
    a term used for developing applications that can work efficiently in a cloud environment
    understanding the cloud behaviors such as elasticity, utilization based charging, fail aware, etc.

9. Twelve-Factor App
    is a methodology describing the characteristics expected from modern cloud-ready applications.
  9.1 a single code base
  9.2 bundling dependencies
        all applications should bundle their dependencies along with the application bundle.
  9.3 externalizing configurations
  9.4 backing services are addressable
  9.5 Isolation between build, release and run
  9.6 Stateless, shared nothing processes
        If there is any requirement to store a state,
        it should be done with a backing database or in an in-memory cache
  9.7 exposing services through port bindings
        application does not depend on the external servers,
        instead, they embed server inside themselves.
        microservices embed service listeners as a part of the service itself
  9.8 concurrency to scale out
  9.9 disposability with minimal overhead
  9.10 development and production parity
        keep development and production environments as identical as possible.
  9.11 externalizing logs
        in order to avoid local I/O bottleneck,
        the recommended approach is to ship logs to a central repository by tapping the logback appenders
        and write to one of the shippers' endpoints.
  9.12 package admin processes
        use the same release bundle as well as an identical environment for both application services and admin tasks.

Building Microservices with Spring Boot
1. @RestController = @Controller + @ResponseBody

2. In stead of a code generator,
   Spring Boot only autoconfigures build files.

3. Spring Boot also enables microservices' development by packaging all the required runtime dependencies in a fat executabl JAR FILE.

4. @SpringBootApplication = @Configuration + @EnableAutoConfiguration + @ComponentScan

5. There are number of tools available to test RESTful services, such as
   Postman, Advance REST client, SOAP UI, Paw, etc.

6. curl command can be used to visit an URL

7. In tests,
   @WebIntegrationTest annotation ensures that the tests are fired against a fully up-and-running server.
   @WebIntegrationTest = @WebAppConfiguration + @IntegrationTest

8. RestTemplate
    is used to all the RESTful service,
    it is a utility class that abstracts the lower level details of the HTTP client.

9.  Spring Initializr
      a drop-in replacement for the STS project wizard,
      and provides a web UI to configure and generate a Spring Boot project.

10. HATEOAS
      Hypertext As The Engine Of Application State
      It is a REST service pattern in which navigation links are provided as part of the payload metadata.
      The client application determines the state and follows the transition URLs provided as part of the state.

11. HAL
      Hypertext Application Language
      HAL browser is a handy API browser for hal+json  data.
      HAL is a format based on JSON that establishes conventions to represent hyperlinks between resources.
      HAL helps APIs be more explorable and discoverable.

12. Autoconfiguration,
      favors convention over configuration
      it uses "*AutoConfiguration" lexical pattern,
      where * represents the library.

13. Run the application with '--debug' to see the autoconfiguration report.

14. securing Spring Boot applications with OAuth2
      firstly, you need to include the OAuth2 dependency
  14.1 @EnableAuthorizationSever,
        creates an authorization server with an in-memory repository to store client tokens
        and provide clients with a username, password, client ID and secret.
  14.2 @EnableResourceServer,
        used to access the tokens.
        This enables a spring security filter that is authenticated via an incoming OAuth2 token

15. @CrossOrigin
      enables CORS (Cross-Origin Resource Sharing)

16. @Lazy
      beans annotated with @Lazy will be initialized only when the need arises.
      it helps to increase the boot startup time.

17. communication between microserviceA and microserviceB should be though "Messaging system"
    this is done by injecting a "Sender" in microsrviceA and a "Receiver" in microserviceB
    and let the "Sender" and "Receiver" talk to the "Middleware"

18. Once the application is annotated with @EnableSwagger2,
    you can visit http://localhost:8080/swagger-ui.html
    to visit the Swagger log

Applying Microservices Concepts
1. bounded context:
    DDD (Domain-driven design) defines the concept of a bounded context.
    a bounded context is a subdomain or subsystem of a larger domain or system that is responsible for performing a particular function.

2. One of the key characteristics of microservices is its support for polyglot architecture.

3. CQRS
    Command Query Responsibility Segregation
    It allows browser clients to send requests to services hosted on different domains.

4. Ensure that transaction boundaries are not stretched across microservices.
   A first class microservice will react upon receiving an event as an input,
   execute a number of internal functions,
   and finally send out another event.

5. Communication styles
  5.1 synchronous style (request-response)
    5.1.1 advantage
            there is no shared state or object
            no other infrastructure dependencies results in fewer overheads
            in case of error handling,
            error will be propagated back to the caller immediately,
            leaving the system in a consistent state,
            without compromising data integrity
    5.1.2 disadvantage
            has scalability limitations
            add hard dependencies between microservices
            many of the failure scenarios have to be handled using timeouts and loops
  5.2 asynchronous style (fire and forget)
    5.2.1 advantage
            services are independent,
            provides higher level of scalability
    5.2.2 disadvantage
            has a dependency to an external messaging server.
            It is complex to handle the fault tolerance of a messaging server.

6. ESB
    Enterprise Service Buss,
    it is found in legacy system architectures,
    but not in microservices

  iPaaS (Integration Platform as a Service)
    the next generation application integration platform.
    In typical deployments, iPaaS invokes API gateways to access microservices

7. (i)BPM
    (Intelligent) Business Process Management

8. Database level segregation is highly demanded.
   even in services have only a few tables,
   it may not be worth investing a full instance of a database,
   a schema level segregation is good enough to start with

9. Transaction boundaries
    It is appropriate to define transaction boundaries within the microsystem using local transactions.
    However, distributed global transactions should be avoided in the microservices context.

10. Eventual consistency is a better option than distributed transactions than span across multiple microservices.
    A classical problem is that of the last room selling scenario in a hotel booking case.
    What if there is only one room left, and there are multiple customers booking this single available room?
    A business model change sometimes make this scenario less impactful.
    We could set an "under booking profile",
    where the actual number of bookable rooms can go below the actual number of rooms (say, bookable = available - 3) in anticipation of cancellations.
    Anything in this range will be accepted as "subject to confirmation",
    and customers will be charged only if payment is confirmed.
    Bookings will be confirmed in a set time window (synchronous).

11. Service endpoint design consideration
      service design has two key elements: contract design and protocol design
  11.1 contract design principles
        KISS (Keep It Simple Stupid)
        YAGNI (You Ain't Gonna Need It)
        CDC (Consumer Driven Contract)
  11.2 protocol design
        The HTTP/REST/JSON protocol stack makes building interoperable system very easy and friendly.
        HATEOS is one of the design patterns emerging for designing progressive rendering and self-service navifations.
        If the service response times are stringent,
        then we may choose alternative protocols such as Avro, Protocol Buffers, or Thrift.

12. since microservices should be autonomous,
    there is a trade-off between adding a dependency versus code duplication

13. API gateway
      it is a UI service,
      which acts as a proxy to the backend.
      exposing a set of consumer-specific APIs.

14. Cross origin request
  14.1 one approach is to enable all microservices to allow cross origin requests (By using CROS)
  14.2 a second approach is to use an API gateway as a single trusted domain for the clients

15. With microservics, it is difficult to handle cross-table search, to solve this problem
  15.1 one approach is to use pre-aggregation to cache the desired data in advance,
       this will result in data duplication
  15.2 another approach is to use "batch query",
       this approach just reduce the query times

16. Service endpoints and communication protocols
  16.1 Synchronous:
        based on REST/JSOON or any other protocols such as Avro, Thrift, Protocol Buffers, etc.
  16.2 Asynchronous:
        Spring Cloud Streams backed by RabbitMQ, other messaging server, or other messaging style implementations such as ZeroMQ

17. Cluster control and provisioning:
      Once we have a large number of containers or virtual machines,
      it is hard to manage and maintain them automatically.
      Cluster control tools provides a uniform operating environment on top of the containers,
      and share the available capacity across multiple services.
      Apache Mesos and Kubernetes are examples of cluster control systems

18. Service registry
      A service registry provides a runtime environment for services to automatically publish their availability at runtime.
      A registry will be good source of information to understand the services topology at any point.
      Eureka from Spring Cloud, Zookeeper, and Etcd are some of the service registry tools available.

19. Data Lake
      used to combine data stored in different microservices,
      and perform near real-time analytics.
      Data integration tools like Spring Cloud Data Flow, Flume, and Kafka are used to consume data.
      HDFS, Cassandra, and the like are used for storing data.

Microservices Evolution - A Case Study
1. dependencies could be query-based or event-based
   event-based is better for scalable systems.

2. Payment is typically a disconnected function due to the nature of security constraints such as PCIDSS-like standards
   The most obvious way to capture a payment is to redirect a browser to a payment page hosted in the payment service

3. SSO
    Single sign-on

Scaling Microservices with Spring Cloud
1. What is Spring Cloud
    Spring Cloud project is an umbrella project from the Spring team that implements a set of common patterns required by distributed systems,
    as a set of easy-to-use Java Spring libraries.
    It is not a cloud solution.
    Rather it provides a number of capabilities that are essential when developing applications targeting cloud development that adhere to the Twelve-Factor application principles.
  1.1 Spring Cloud
        a developer kit for developing Internet-scale Spring Boot applications
  1.2 Cloud Foundry
        an open-source PaaS for building, deploying and scaling applications.

2. Spring Cloud capabilities
  2.1 Distributed configuration
        The distributed configuration management module is to externalize and centralize microservice configuration parameters.
    2.1.1 Spring Cloud Config
            externalized configuration server with Git or SVN as the backing repository
            it is just a Spring Boot application
    2.1.2 Spring Cloud Bus
            provide support for propagating configuration changes to multiple subscribers.
    2.1.3 Zookeeper, HashiCorp's Consul
            used for distributed configuration management

  2.2 Routing
        an API gateway component,
        primarily used similar to a reverse proxy that forwards requests from consumers to service providers.
        it can also perform software-based routing and filtering
    2.2.1 Zuul

  2.3 Load balancing
        route requests to available servers using a variety of load balancing algorithms
    2.3.1
      Ribbon

  2.4 Service registration and discovery
        programmatically register services with a repository when a service is available and ready to accept traffic.
    2.4.1 Eureka
    2.4.2 Zookeeper
    2.4.3 Consul

  2.5 Service-to-service calls
    2.5.1 Spring Cloud Feign
            offers a declarative approach for making RESTful service-to-service calls in a synchronized way.

  2.6 Circuit breaker
        implements the circuit breaker pattern
        the circuit breaker breaks the circuit
        when it encounters failures in the primary service
        by diverting traffic to another temporary fallback service.
        It also automatically reconnects back to the primary service when the service is back to normal
        It finally provides a monitoring dashboard for monitoring the service state changes.
    2.6.1 Spring Cloud Hystrix and Hystrix Dashboard

  2.7 Global locks, leadership election and cluster state
        used for cluster management and coordination
    2.7.1 Spring Cloud Cluster project
            implements this capability by using Redis, Zookeeper and Consul

  2.8 Security
        externalized authorization
    2.8.1 OAuth2
            offers SSO (Single Sign-On) capabilities

  2.9 Big data support
    2.9.1 Spring Cloud Streams and Spring Cloud Data Flow

  2.10 Distributed tracing
        helps to thread and correlate transitions that are spanned across multiple microservices
    2.10.1 Spring Cloud Sleuth
            provides an abstraction on top of various distributed tracing mechanisms,
            such as Zipkin and HTrace with the support of a 64-bit ID.

  2.11 Distributed messaging
    2.11.1 Kafka
    2.11.2 Redis
    2.11.3 RabbitMQ

  2.12 Cloud support
        offers various connectors, integration mechanisms and abstraction on top of different cloud providers,
        such as Cloud Foundry and AWS

3.OSS (Open Source Software)

4. Cloud Stream works on the concept of a source and a sink.
  4.1 source,
        represents the sender perspective of the messaging
  4.2 sink,
        represents the receiver perspective of the messaging

5. With Eureka
    remember to wait for 40 to 50 seconds before starting the next service.
    This will ensure the dependent services are registered and are available before we start a new service

Autoscaling Microservices
1. Consumers use the Eureka client to look up the Eureka server to identify the available instances of a target service.
   The Ribbon client uses this server list to load-balance between the available microservice instances

2. Autoscaling
    an approach to automatically scaling out instances based on the resource usage to meet the SLAs by replicating the services to be scaled.
    It is also called "elasticity" or "dynamic resource provisioning and deprovisioning"

3. Autoscaling approaches
  3.1 resource constrains
  3.2 during specific time periods
  3.3 message queue length
  3.4 business parameters
  3.5 predicative autoscaling

4. The life cycle manager service is nothing but another Spring Boot application

Logging and Monitoring Microservices
1. Log store
    a log store is the place where all log messages are stored for real-time analysis, trending and so on.
    Typically, a log store is a NoSQL database, such as HDFS, capable of handling large data volumes.

2. Benefit of centralized logging approach
    there is no local I/O or blocking disk writes.
    It also does not use the local machine's disk space.

3. log contents
  3.1 context, typically is
    3.1.1 timestamp
    3.1.2 IP address
    3.1.3 user information
    3.1.4 process details (service, class, functions, etc.)
    3.1.5 log type
    3.1.6 classification

  3.2 message,
        typically is plain and simple free text information

  3.3 correlation ID,
        used to establish the link between service calls,
        so that calls spanning microservices can be traced.

4. A typical architecture used for stream processing is a combination of Flume and Kafka together with
   either Storm or Spark Streaming
   Log4j has Flume appenders,
   which are useful to collect log messages.
   These messages are pushed into distributed Kafka message queues.
   The stream processors collect data from Kafka and process them on the fly before sending it to Elasticsearch and other log stores.

5. ELK stack
    the most commonly used architecture for custom log management is a combination of
    Elasticsearch (real-time data store),
    Logstash (shipper)
    Kibana (dashboard)
    e.g.
      Microservices (Logback/Log4j appenders) --> Logstash --> Elasticsearch <-- Kibana

Containerizing Microservices with Docker
1. Container
    Containers provide private spaces on top of the operating system.
    This technique is also called operating system virtualization.
    In this approach,
    the kernel of the operating system provides isolated virtual spaces.
    Each of these virtual spaces is called a container or virtual engine (VE).
    Containers allow processes to run on an isolated environment on top of the host operating system.

2. virtual machines vs containers.
  2.1 virtual machines operate at a much lower level,
      provides hardware virtualization
      a VM is an isolated unit with an embedded operating system. (Guest OS)
  2.2 replicate the whole operating system,
      heavy in nature
  2.3 container share certain parts of the host kernel and operating system.
      containers provide an isolated execution environment directly on top of the host operating system.

3. Docker
    Docker is a platform to build, ship, and run lightweight containers based on Linux kernels.

4. Docker concepts
  4.1 Docker images
        read-only copy of the operating system libraries, the application, and its libraries.
  4.2 Docker containers
        Docker containers are the running instances of a Docker image.
  4.3 Docker registry
        the Docker registry is a central place where Docker images are published and download from.
        The URL https://hub.docker.com is the central registry provided by Docker
  4.4 Dockerfile
        a Dockerfile is a build or scripting file that contains instructions to build a Docker image

Managing Dockerized Microservices with Mesos and Marathon
1. Mesos is a distributed OS Core

2. Marathon is  a Framework running on top of Mesos
   hand used to manage long running processes such as microservices

The Microservices Development Life Cycle
1. DevOps
    a lean it model

2. DevOps reduces the gap between the development and operations teams
   so that it can potentially reduce wastage and improve quality.

3. The trio -- Microservices, Cloud, DevOps

4. Start-ups philosophy
    have a unit of people not worried about how they achieve things,
    rather,
    the focus is on what they want to achieve.
    Once they have a product in place

5. The Agile practice
    software is delivered in an incremental, iterative way,
    using the principles put forth in the Agile manifesto
    the following is 4 key points that Agile software development teams should focus on
    5.1 individual and interaction over processes and tools
    5.2 working software over comprehensive documentation
    5.3 customer collaboration over contract negotiation
    5.4 responding to change over following a plan

6. MVP (Minimum Viable Product)

7. CD (Continuous Delivery)
    it is considered as the next evolution of CI (Continuous Integration),
    which adds QA cycles into the integration pipeline and makes the software ready to release to production.
    A manual action is required to move it to production.

8. Continuous deployment
    considered as the next evolution of CD,
    by integrating automatic release processes into the CD pipeline.

9. 
