Getting started with jquery
1. $(),
    is equal to jQuery(),
    its whole job is grabbing the elements you put into the parentheses
    the inputs can be three types:
    1.1 CSS selectors,
          jQuery will return you the set of elements that match that selector
    1.2 HTML,
          if you put a string of HTML, you can add DOM elements to the browser on the fly
    1.3 Javascript Object

2. CSS selectors
  2.1 element selectorï¼š
        syntax: HTML element
        e.g. h1, which represents header1
  2.2 class selector:
        syntax .class
        e.g.
          .my_class
          div.my_class, selects only the **divs** that have the **my_class** class
  2.3 ID selector:
        syntax: #ID
        e.g. #my_id

  Combined Selectors
  2.4 Descendent selector:
        syntax: parent child grandChild ...
        e.g. div p
  2.5 type and ID selector
        syntax: type#ID
        e.g. button#removeMe

  2.6 type (type means predefined HTML elements) and class (class is user defined) selector
        syntax: type.CLASS
        e.g. li.fish

  Note: in CSS, selectors select elements to add **style** to those elements
        in jQuery, selectors select elements to add **behavior** to those elements

3. jQuery statements should end with ';'

Selectors and methods: Grab and go
1. <script> tag is better to be written in end of <body>,
   because this style will not hinder the browser from parallel download images,
   which increase performance

2. structure, style, and script
   for an element,
   it defines its **structure** in HTML,
   further has its style configured in CSS,
   and finally get its behavior configured in Javascript/its corresponding libraries (like jQuery)

3. you can write Javascript inside jQuery function.
   after all, jQuery is just a Javascript library

4. '*', is a wildcard in jQuery which represents all the elements in the DOM

5. $(this),
    represents the current element
    it is context-dependent,
    one of the best place to use it is within a function that runs when a jQuery method is called.
    Note:
      this,
        is a Javascript reference to the DOM element we want to work with
        by wrapping it with $(), we can use it with jQuery methods

6. Using DOM inspectors, like Chrome Developer tools or Firebug for Firefox,
   should show you the DOM as it is displayed on the page
   (which is after Javascript manipulation, if there is any)

7. jQuery methods:
    reusable codes defined in the jQuery library.
  7.1 .append,
        inserts the specified content into the DOM.
  7.2 .remove,
        takes elements out of the DOM.
8. how javascript or jQuery works
    most of the time,
    we use the scripts to introduce behavior to the HTML DOM,
    it is an asynchronous process,
    when loading the page, we register all the behaviors into those DOM elements,
    the actual calling time is later,
    when event triggering the behaviors

    So there is no "main entry point" for the script file,
    but many separate small entry points,
    which triggers by events

    javascript fragments does not have a global sequence among each other

9. syntax of defining a javascript function
    function NAME(){
      //statements
    }

    there are two ways of giving a function a name
    9.1 by function declaration as shown above
    9.2 by function expression:
          e.g. var myFunction = function(){}
          Note: as we can see here, function is used as a first class variable in Javascript

10. function names and method names are case sensitive

11. two ways of using NamedFunctions
  11.1 using them directly, parentheses are needed
        e.g. myFunction()
  11.2 using them as event handlers, only the function name is needed, no parentheses
        e.g. $("#myElement").click(myFunction)

12. binding/unbinding events
  12.1 bind:
        element.bind('event', handler);
  12.2 unbind:
        element.unbind('event');

13. functions can return values by using the "return" keyword
    return types can be 'number', 'string' or 'DOM element"
    unlike java,
    we do not need to explicitly declare return type

14. jQuery methods can not only originated from an DOM element,
    it can also act as a global method, which can be called directly by a '.'
    e.g. $.contains

15. Technically, return value is not mandatary to functions.
    but it is a good practice to return a value,
    for if we do not return value, the function's default return value is 'undefined', which is not able to be handled by code

16. you can pass arbitrary number of arguments into a functions
  16.1 if the passed in arguments are less than defined, the rest will be undefined
  16.2 if the passed in arguments are more than defined, the exceeding will be ignored

17. in a loop,
    if the current iteration returns 'false', it acts like Java's 'break'
    if the current iteration returns 'true', it will just move on to the next iteration

18. jQuery method: add/removeClass("CLASS_NAME")
    can be easily used to add/remove CSS classes

    Making things happen on your page
    1. Events
        jQuery groups events into five different categories:
      1.1 browser events
      1.2 document loading events
      1.3 form events
      1.4 keyboard events
      1.5 mouse events

    2. adding/removing events by using:
        bind/unbind('event', handler)

    3. loop through groups of elements, no matter which selector we choose
       syntax:
        elements.each(handler)
        if you need the index of each element,
        it has to be included as a input parameter of the handler method
        e.g.
         $(".tofu").each(function(i){
          $(this).after($m[i]);
         });

Web page manipulation: Mod the DOM
1. remove() and detach()
    remove() will remove the selected element permanently,
    detach() will detach the selected element from DOM, but still hold it in memory

2. traverse the DOM tree by using
  2.1 parent()
  2.2 children()
  2.3 prev()
  2.4 next()

3. delete the content inside an element, instead of deleting the whole elemetn:
    by using empty()

4. '$' used in defining variable names
      it is common practice among jQuery coders to place a dollar sign in front of a variable
      that will be used to store **elements** returned from jQuery.

5. $("ELEMENT1").replaceWith("ELEMENT2")

6. filter methods to narrow down your selection
  6.1 first()
  6.2 eq(INDEX)
  6.3 last()
  6.4 slice(START_INDEX, END_INDEX)
  6.5 filter(SELECTOR), Note: the filter method will filter out everything but elements that match the selector you put in this parentheses
  6.6 not(SELECTOR)

7. find(SELECTOR)
    can be used to find element conforming the SELECTOR inside a jQuery array

8. CHILD.wrap(PARENT)
    wrap the CHILD element into the PARENT element

jQuery Effects and Animation
1. setTimeout("FUNCTION()", TIME_IN_MILLISECONDS)
    the setTimeout method tells the JS interpreter to run a function and then wait for a while before running it again

2. function can be used at the front and defined at the bottom of the javascript file.
   the sequence of usage and definition do not matter

3. the 'animate()' method is powerful,
   but it only let you work on CSS properties that use numbers for their settings
   Elements can be moved either absolutely or relatively.
   use of animate() method and examples:
      $("#my_div").animate({left:"100px"}, 500);
      select the element, call the animate method, pass CSS properties that you want to animate and the animation duration (in milliseconds)
  3.1 borders, margin, padding
  3.2 element height, min-height, max-height
  3.3 element width, min-width, max-width
  3.4 bottom, left, right, top position
  3.5 background position
  3.6 letter spacing, word spacing
  3.7 text indent
  3.8 line height
  Note: the parameters for CSS properties have to be set using the DOM standard, not the CSS standard.

4. If you want users to turn off your web page animation,
   you can wire up a click button,
   whose handler is
    $.fx.off = true

5. Fade effects, change the 'opacity' property of CSS
  5.1 fadeIn
  5.2 fadeOut
  5.3 fadeTo

6. Slide effects, change the 'height' property of CSS
  6.1 slideUp
  6.2 slideDown
  6.3 slideToggle

7. For JSON objects,
   you can assign the value of properties using either '=' or ':'
   properties can be accessed by either '.' or '['PROPERTY_NAME']'

8. $.inArray(VALUE, ARRAY)
    static method, which is used to determine if the VALUE is inside the ARRAY

9. To empty an array in JavaScript, you simply set its length to 0

10. jQuery method ELEMENT.attr(NAME, VALUE)
    can be used to add additional properties to the ELEMENT

11. .trigger(EVENT, EXTRA_PARAMETERS...)
    used to manually generate an event

custom functions for custom effects
1. In the world of JavaScript, the "window" object is the "global" object.
   in other words,
   "window" is the "topmost object"
   More precisely,
   every time a new "tab/page/frame" is opened, a window object is created

2. window object name and methods
  2.1 window.name
        name of the window

  2.2 window.history
        lets you access different URLs that the window has loaded over time

  2.3 window.document
        refers to the main content of the loaded document

  2.4 window.onfocus
        detects when the window receives a click, keyboard input, or some other kind of input

  2.5 window.onblur
        detects when the window loses focus

  2.6 window.setTimeout()
        used to set a period of time to wait before calling a function or other statement

  2.7 window.clearTimeout()
        used to cancel the period of time to wait.

  2.8 window.setInterval()
        used to set a period of time to wait between repetitions of a function call or other statement

  2.9 window.clearInterval()
        used to cancel the period of time to wait between repetitions.

jQuery and Ajax (Asynchronous JavaScript and XML)
1. plug-in:
    extensions to the base jQuery library that improve functionality

2. $.ajax({}); method:
      the jQuery Ajax method returns an object with data about the particular action you are trying to perform.
      The ajax method can accept many different parameters,
      and can POST data to or GET data from a server

3. setInterval() normally would work to schedule regular events on a page,
   but when dependent on outside resources (like Ajax calls), it can cause problem
   setInterval will run even if the function it is calling isn't finished yet.
   solution to scheduling such tasks (tasks depend on outside resources) is to use self-referencing functions with setTimeout()

4. Self-referencing function
    calls itself during its normal operations.
    it is particularly useful when you need to wait for the function's currently running operation to complete before running it again.

5. convenience methods for Ajax in jQuery
    jQuery has five convenience or shorthand methods for Ajax (but ultimately calling the $.ajax() method):
    5.1 get

    5.2 getJSON
          syntax:
            $.getJSON(URL_TO_LOAD, function(json){});
          Note: the URL_TO_LOAD, is a URL to access the server resource, which produces JSON data

    5.3 getScript

    5.4 post

    5.5 load

    Note:
      the first 4 are called using the jQuery object ('$'),
      but 'load' can be called from any element.
      which will be the destination of the returned data


Handling JSON data
1. jQuery provides a shortcut method, **post()**, dedicated to sending data to the server.
  1.1 syntax:
      $.post(URL_TO_SEND, DATA, FUNCTION(JOSON){});
  1.2 if you would like to use jQuery's $.post() to work for submitting form data,
      you should disable the default "form submission" action by
      set the button's **submit** callback function to return false

2. When we were using XML, we had to scan through the data to 'find' the desired data.
   However, JSON objects that gets returned from server can be directly access as javascript objects,
   whose properties can be extracted by using '.'

jQuery UI: Extreme form makeover
1. the way jQuery plug-in works
    plug-in is just a fancy name for already built API,
    in order to work with plug-ins, you need to include the library as a script into the HTML.
    by calling the methods in the included library,
    the method will return customized objects/effects

2. 
