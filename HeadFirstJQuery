Getting started with jquery
1. $(),
    is equal to jQuery(),
    its whole job is grabbing the elements you put into the parentheses
    the inputs can be three types:
    1.1 CSS selectors,
          jQuery will return you the set of elements that match that selector
    1.2 HTML,
          if you put a string of HTML, you can add DOM elements to the browser on the fly
    1.3 Javascript Object

2. CSS selectors
  2.1 element selectorï¼š
        syntax: HTML element
        e.g. h1, which represents header1
  2.2 class selector:
        syntax .class
        e.g.
          .my_class
          div.my_class, selects only the **divs** that have the **my_class** class
  2.3 ID selector:
        syntax: #ID
        e.g. #my_id

  Combined Selectors
  2.4 Descendent selector:
        syntax: parent child grandChild ...
        e.g. div p
  2.5 type and ID selector
        syntax: type#ID
        e.g. button#removeMe

  2.6 type (type means predefined HTML elements) and class (class is user defined) selector
        syntax: type.CLASS
        e.g. li.fish

  Note: in CSS, selectors select elements to add **style** to those elements
        in jQuery, selectors select elements to add **behavior** to those elements

3. jQuery statements should end with ';'

Selectors and methods: Grab and go
1. <script> tag is better to be written in end of <body>,
   because this style will not hinder the browser from parallel download images,
   which increase performance

2. structure, style, and script
   for an element,
   it defines its **structure** in HTML,
   further has its style configured in CSS,
   and finally get its behavior configured in Javascript/its corresponding libraries (like jQuery)

3. you can write Javascript inside jQuery function.
   after all, jQuery is just a Javascript library

4. '*', is a wildcard in jQuery which represents all the elements in the DOM

5. $(this),
    represents the current element
    it is context-dependent,
    one of the best place to use it is within a function that runs when a jQuery method is called.
    Note:
      this,
        is a Javascript reference to the DOM element we want to work with
        by wrapping it with $(), we can use it with jQuery methods

6. Using DOM inspectors, like Chrome Developer tools or Firebug for Firefox,
   should show you the DOM as it is displayed on the page
   (which is after Javascript manipulation, if there is any)

7. jQuery methods:
    reusable codes defined in the jQuery library.
  7.1 .append,
        inserts the specified content into the DOM.
  7.2 .remove,
        takes elements out of the DOM.

8. how javascript or jQuery works
    most of the time,
    we use the scripts to introduce behavior to the HTML DOM,
    it is an asynchronous process,
    when loading the page, we register all the behaviors into those DOM elements,
    the actual calling time is later,
    when event triggering the behaviors

    So there is no "main entry point" for the script file,
    but many separate small entry points,
    which triggers by events

    javascript fragments does not have a global sequence among each other

9. syntax of defining a javascript function
    function NAME(){
      //statements
    }

    there are two ways of giving a function a name
    9.1 by function declaration as shown above
    9.2 by function expression:
          e.g. var myFunction = function(){}
          Note: as we can see here, function is used as a first class variable in Javascript

10. function names and method names are case sensitive

11. two ways of using NamedFunctions
  11.1 using them directly, parentheses are needed
        e.g. myFunction()
  11.2 using them as event handlers, only the function name is needed, no parentheses
        e.g. $("#myElement").click(myFunction)

12. binding/unbinding events
  12.1 bind:
        element.bind('event', handler);
  12.2 unbind:
        element.unbind('event');

13. functions can return values by using the "return" keyword
    return types can be 'number', 'string' or 'DOM element"
    unlike java,
    we do not need to explicitly declare return type

14. jQuery methods can not only originated from an DOM element,
    it can also act as a global method, which can be called directly by a '.'
    e.g. $.contains

15. Technically, return value is not mandatary to functions.
    but it is a good practice to return a value,
    for if we do not return value, the function's default return value is 'undefined', which is not able to be handled by code

16. you can pass arbitrary number of arguments into a functions
  16.1 if the passed in arguments are less than defined, the rest will be undefined
  16.2 if the passed in arguments are more than defined, the exceeding will be ignored

17. in a loop,
    if the current iteration returns 'false', it acts like Java's 'break'
    if the current iteration returns 'true', it will just move on to the next iteration

18. jQuery method: add/removeClass("CLASS_NAME")
    can be easily used to add/remove CSS classes

Web page manipulation: Mod the DOM
1. remove() and detach()
    remove() will remove the selected element permanently,
    detach() will detach the selected element from DOM, but still hold it in memory

2.
